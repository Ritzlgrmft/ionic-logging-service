var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AjaxAppender.html",[0,0.248,1,1.06]],["body/classes/AjaxAppender.html",[0,0.151,1,1.23,2,0.643,3,0.288,4,0.231,5,0.19,6,3.301,7,0.962,8,0.714,9,1.872,10,2.07,11,0.832,12,1.26,13,2.417,14,2.07,15,2.567,16,2.07,17,1.305,18,1.601,19,0.052,20,2.775,21,2.567,22,3.112,23,2.567,24,3.112,25,2.567,26,1.081,27,0.151,28,0.935,29,1.848,30,3.153,31,0.88,32,2.417,33,1.303,34,3.56,35,3.56,36,3.56,37,3.56,38,2.567,39,2.567,40,2.567,41,2.078,42,0.732,43,1.743,44,2.166,45,1.686,46,1.648,47,1.303,48,1.842,49,1.141,50,1.665,51,1.419,52,0.508,53,0.803,54,2.871,55,1.648,56,1.807,57,2.07,58,2.417,59,1.228,60,0.674,61,1.743,62,2.141,63,1.329,64,1.743,65,1.141,66,1.498,67,1.743,68,1.957,69,2.06,70,1.498,71,1.648,72,1.498,73,1.001,74,1.303,75,1.303,76,1.743,77,2.07,78,1.303,79,1.648,80,1.494,81,2.07,82,3.559,83,2.871,84,1.119,85,2.567,86,1.303,87,2.078,88,1.807,89,2.078,90,2.078,91,3.153,92,1.648,93,2.997,94,3.858,95,3.858,96,1.648,97,3.56,98,2.417,99,2.871,100,3.56,101,2.871,102,3.56,103,2.567,104,1.648,105,4.087,106,2.567,107,2.567,108,2.567,109,1.329,110,2.567,111,1.648,112,2.567,113,2.07,114,1.648,115,1.141,116,0.528,117,1.013,118,0.962,119,0.88,120,1.119,121,0.962,122,0.962,123,1.648,124,0.565,125,0.836,126,0.19,127,0.962,128,1.119,129,1.715,130,1.841,131,1.648,132,1.119,133,1.648,134,2.07,135,1.119,136,0.324,137,1.816,138,1.119,139,1.841,140,1.329,141,2.07,142,3.858,143,2.567,144,2.567,145,1.648,146,2.567,147,1.648,148,1.648,149,1.648,150,1.648,151,1.648,152,1.648,153,1.648,154,1.648,155,1.648,156,1.648,157,1.648,158,1.119,159,1.329,160,0.962,161,2.567,162,1.648,163,1.743,164,1.648,165,2.567,166,1.648,167,1.329,168,1.648,169,0.836,170,1.648,171,0.643,172,0.962,173,0.962,174,1.119,175,1.119,176,1.648,177,1.401,178,1.648,179,1.648,180,1.648,181,1.648,182,1.648,183,1.648,184,1.648,185,1.648,186,0.015,187,0.023,188,0.015]],["title/interfaces/AjaxAppenderConfiguration.html",[44,1.379,189,0.455]],["body/interfaces/AjaxAppenderConfiguration.html",[1,1.277,3,0.422,4,0.459,5,0.377,6,2.223,8,0.548,11,0.815,12,1.278,17,0.86,19,0.052,20,3.492,22,3.923,24,3.923,26,1.763,27,0.299,28,1.1,44,2.125,52,0.56,53,1.011,58,2.842,59,1.258,60,1.1,80,1.591,81,3.923,82,3.376,83,3.376,99,3.376,101,3.376,113,3.376,116,0.861,126,0.377,132,2.842,134,3.923,136,0.956,186,0.03,187,0.038,188,0.03,189,0.548,190,1.277,191,1.662,192,1.546,193,2.444,194,2.125,195,1.258,196,1.435,197,1.435,198,1.86,199,4.187,200,3.376,201,2.842]],["title/interfaces/BrowserConsoleAppenderConfiguration.html",[189,0.455,202,1.586]],["body/interfaces/BrowserConsoleAppenderConfiguration.html",[3,0.455,4,0.545,5,0.447,8,0.65,17,1.02,19,0.051,26,1.838,27,0.355,28,1.222,52,0.447,53,0.915,60,1.222,116,0.834,126,0.447,136,0.915,186,0.035,187,0.043,188,0.035,189,0.65,190,1.515,191,1.972,192,1.399,193,2.717,194,2.363,195,1.553,196,1.595,197,1.595,202,2.717,203,3.132,204,1.972,205,2.267]],["title/classes/JsonLayout.html",[0,0.248,122,1.586]],["body/classes/JsonLayout.html",[0,0.295,2,1.258,3,0.295,4,0.453,5,0.371,8,0.54,11,0.694,12,1.089,18,2.105,19,0.052,20,2.189,27,0.295,29,1.756,31,1.421,41,2.824,45,1.421,50,1.258,51,1.504,52,0.371,53,0.634,56,2.105,59,1.378,66,2.921,68,1.618,73,1.618,87,2.824,88,2.105,89,2.42,90,2.42,115,1.843,116,0.81,117,1.089,119,1.571,122,2.42,126,0.371,127,1.882,171,1.258,177,1.571,186,0.029,187,0.038,188,0.029,200,3.344,206,3.696,207,2.6,208,3.901,209,2.815,210,4.146,211,4.146,212,3.344,213,4.583,214,4.146,215,4.146,216,4.146,217,4.146,218,4.146,219,3.225,220,3.225,221,4.838,222,3.225,223,0.969,224,2.189,225,1.882,226,3.225,227,1.105,228,3.225,229,3.225,230,3.225,231,3.225,232,3.225,233,3.225,234,3.225]],["title/classes/LocalStorageAppender.html",[0,0.248,235,1.06]],["body/classes/LocalStorageAppender.html",[0,0.133,2,0.568,3,0.266,4,0.204,5,0.167,7,0.849,8,0.681,9,1.744,11,0.764,12,1.382,16,1.876,17,1.271,18,1.686,19,0.052,26,0.996,27,0.133,28,0.611,29,1.784,31,0.797,32,2.255,33,1.686,41,1.939,42,0.646,43,1.579,45,1.618,47,1.181,48,1.781,49,1.034,50,1.512,51,1.343,52,0.446,53,0.762,56,1.476,59,0.998,61,1.579,62,1.974,64,1.579,65,1.034,66,1.358,67,1.579,68,1.744,69,1.986,70,1.358,72,1.358,73,0.908,74,1.181,75,1.967,76,1.579,77,1.876,78,1.181,80,1.397,84,0.988,86,1.686,87,2.262,88,1.967,89,2.262,90,2.262,93,2.255,115,1.476,116,0.764,117,0.954,119,0.797,121,0.849,124,0.499,125,0.738,126,0.167,127,0.849,128,0.988,129,1.614,130,2.467,135,0.988,136,0.286,137,1.722,138,0.988,139,1.697,140,1.173,141,1.876,158,0.988,159,1.173,160,0.849,163,1.579,167,1.173,169,0.738,171,1.134,172,0.849,173,0.849,174,0.988,175,0.988,177,1.448,186,0.013,187,0.021,188,0.013,194,1.181,198,1.034,223,0.437,224,0.988,225,0.849,227,0.499,235,0.908,236,3.155,237,2.366,238,2.255,239,1.579,240,2.58,241,2.326,242,2.907,243,3.155,244,2.326,245,3.099,246,2.326,247,1.686,248,2.326,249,3.322,250,3.322,251,2.255,252,2.679,253,2.326,254,1.579,255,1.876,256,2.065,257,1.173,258,1.455,259,1.876,260,1.455,261,1.455,262,1.876,263,1.455,264,2.792,265,1.936,266,1.455,267,2.262,268,2.326,269,1.455,270,2.326,271,3.322,272,2.326,273,1.455,274,2.255,275,1.876,276,1.455,277,1.876,278,1.876,279,2.762,280,1.876,281,2.679,282,1.579,283,1.455,284,0.646,285,0.849,286,0.988,287,1.173,288,0.849,289,2.255,290,1.939,291,1.579,292,1.579,293,3.604,294,2.326,295,2.907,296,2.326,297,3.874,298,2.326,299,2.907,300,1.455,301,1.455,302,2.344,303,1.455,304,1.876,305,1.455,306,1.455,307,1.455,308,1.455,309,1.455,310,1.455,311,1.455,312,1.455,313,1.455,314,1.173,315,0.988,316,1.173,317,1.173,318,2.344,319,3.124,320,1.876,321,0.988,322,1.173,323,1.173,324,1.358,325,1.173,326,0.738,327,1.173,328,1.173,329,1.173,330,2.326,331,2.326,332,2.326,333,2.326,334,1.455,335,1.173,336,1.455,337,1.455]],["title/interfaces/LocalStorageAppenderConfiguration.html",[189,0.455,256,1.379]],["body/interfaces/LocalStorageAppenderConfiguration.html",[3,0.435,4,0.49,5,0.402,8,0.585,9,1.701,11,0.73,12,1.308,17,0.917,19,0.051,26,1.792,27,0.319,28,1.145,52,0.547,53,0.979,60,1.145,80,1.541,86,2.214,116,0.875,126,0.402,136,0.979,186,0.032,187,0.04,188,0.032,189,0.585,190,1.362,191,1.773,192,1.497,193,2.546,194,2.214,195,1.311,196,1.495,197,1.495,235,1.362,236,2.371,237,2.113,240,2.214,243,2.961,245,3.382,247,2.529,256,2.214,262,3.517,264,2.546,267,2.546,288,2.546]],["title/classes/LogLevelConverter.html",[0,0.248,124,0.931]],["body/classes/LogLevelConverter.html",[0,0.369,2,0.981,3,0.321,4,0.353,5,0.289,8,0.677,11,0.677,19,0.051,27,0.23,29,1.385,31,1.202,45,1.385,48,1.577,50,1.577,51,1.215,52,0.611,53,0.794,60,0.66,68,1.577,78,2.634,116,0.819,117,0.921,119,1.202,124,1.202,126,0.289,130,2.958,136,0.494,137,1.796,139,2.359,177,1.898,186,0.023,187,0.032,188,0.023,192,1.215,195,0.755,196,0.861,197,0.861,227,1.839,284,2.359,285,1.467,338,2.553,339,2.027,340,3.508,341,3.508,342,1.781,343,2.382,344,3.508,345,3.508,346,3.508,347,3.508,348,5.068,349,2.513,350,4.765,351,3.522,352,3.527,353,3.508,354,2.513,355,4.374,356,3.508,357,2.513,358,4.041,359,4.44,360,3.508,361,4.041,362,3.508,363,4.041,364,3.508,365,4.041,366,3.508,367,4.041,368,3.508,369,4.041,370,3.508,371,4.041,372,3.508,373,4.041,374,3.508,375,4.041,376,3.259]],["title/interfaces/LogMessage.html",[189,0.455,265,1.207]],["body/interfaces/LogMessage.html",[3,0.328,4,0.504,5,0.413,8,0.601,11,0.865,19,0.052,27,0.328,28,1.165,51,1.333,52,0.595,59,1.633,65,1.971,98,3.012,116,0.924,126,0.413,186,0.033,187,0.041,188,0.033,189,0.601,190,1.4,223,1.582,225,2.936,227,1.804,265,1.971,326,2.553,338,2.095,377,2.894,378,3.415,379,4.815]],["title/classes/Logger.html",[0,0.248,223,0.817]],["body/classes/Logger.html",[0,0.13,2,0.554,3,0.395,4,0.199,5,0.163,8,0.743,11,0.743,12,0.6,18,2.471,19,0.052,27,0.13,29,1.833,31,0.782,42,0.631,45,1.608,47,1.159,48,1.278,49,1.014,50,2.06,51,1.587,52,0.522,53,1.024,59,1.388,60,0.943,65,2.286,68,1.879,69,2.202,75,1.159,80,0.427,88,1.159,116,0.884,117,0.752,119,0.782,124,0.487,125,0.721,126,0.163,129,0.631,136,0.644,137,2.296,169,1.664,171,1.899,177,1.381,186,0.013,187,0.021,188,0.013,195,1.259,196,1.123,197,1.123,198,1.014,201,3.304,208,1.841,223,1.41,227,1.792,284,1.703,285,0.829,324,0.829,326,2.612,351,1.55,380,1.146,381,1.841,382,2.895,383,2.895,384,2.283,385,3.277,386,3.277,387,2.283,388,2.283,389,1.421,390,0.964,391,2.283,392,5.39,393,1.421,394,4.056,395,4.867,396,4.867,397,2.283,398,1.421,399,2.283,400,1.421,401,2.283,402,1.421,403,2.283,404,1.421,405,2.283,406,1.421,407,2.283,408,3.59,409,1.421,410,2.283,411,2.308,412,1.421,413,2.283,414,1.421,415,2.283,416,1.421,417,2.283,418,1.421,419,2.283,420,1.421,421,2.643,422,1.146,423,1.421,424,1.421,425,1.421,426,1.421,427,4.867,428,4.189,429,1.421,430,2.861,431,1.421,432,2.861,433,2.861,434,1.421,435,1.421,436,1.421,437,1.421,438,1.421,439,1.421,440,2.283,441,1.421,442,1.421,443,1.421,444,0.964,445,1.421,446,0.964,447,0.964,448,1.421]],["title/injectables/LoggingService.html",[449,1.586,450,1.379]],["body/injectables/LoggingService.html",[0,0.143,1,1.189,3,0.143,4,0.219,5,0.18,8,0.669,9,1.632,11,0.869,12,1.364,13,1.672,14,1.986,17,1.138,19,0.052,26,1.185,27,0.143,28,0.647,29,1.808,31,0.844,33,2.201,42,1.354,45,1.565,47,1.25,48,1.897,49,1.094,50,1.468,51,1.4,52,0.46,53,0.74,54,3.373,56,1.91,57,2.789,58,1.672,59,1.303,60,0.647,68,1.691,69,1.776,70,1.437,72,1.437,73,1.468,74,1.25,75,2.029,78,1.25,80,0.74,86,1.25,115,1.776,116,0.764,117,1.171,118,0.912,119,1.044,120,2.069,124,0.536,125,0.793,126,0.18,129,1.094,136,0.484,137,1.672,139,0.912,160,0.912,169,1.756,171,1.632,172,0.912,173,0.912,177,1.434,186,0.014,187,0.022,188,0.014,192,0.74,195,0.74,198,0.694,204,0.793,205,2.019,223,1.568,227,1.185,235,1.781,237,1.672,240,1.91,243,2.943,245,2.348,247,1.25,251,2.348,254,2.348,259,1.986,265,1.672,274,1.672,279,1.672,282,2.348,286,1.061,289,1.061,290,0.912,291,1.061,292,1.061,315,1.672,324,2.019,342,0.793,351,1.672,359,1.26,376,1.26,378,2.348,390,1.061,411,1.26,422,1.986,444,1.061,446,1.061,447,1.061,449,1.437,450,1.25,451,1.563,452,1.26,453,2.789,454,2.462,455,1.986,456,2.789,457,2.943,458,1.847,459,1.986,460,2.462,461,3.047,462,3.047,463,2.462,464,2.462,465,3.458,466,2.462,467,1.563,468,2.019,469,1.563,470,2.462,471,1.563,472,2.462,473,2.462,474,2.462,475,1.986,476,1.563,477,2.462,478,2.462,479,1.986,480,2.462,481,2.462,482,2.462,483,1.563,484,2.462,485,1.563,486,1.672,487,2.462,488,1.563,489,2.462,490,1.563,491,1.563,492,1.563,493,2.462,494,1.986,495,2.462,496,2.462,497,2.019,498,2.462,499,1.986,500,2.462,501,3.047,502,1.563,503,1.563,504,1.563,505,1.563,506,2.462,507,1.563,508,1.26,509,1.563,510,1.563,511,1.563,512,1.563,513,1.563,514,1.563,515,1.563,516,1.563,517,1.26,518,1.563,519,1.563,520,1.563,521,2.462,522,2.462,523,2.462,524,1.563,525,1.563,526,1.563,527,1.563,528,1.563,529,1.563,530,1.563,531,3.047,532,1.563,533,2.462,534,1.563,535,1.563,536,1.563,537,1.563,538,1.563,539,1.563,540,1.563,541,1.563,542,1.563,543,1.563,544,1.563,545,1.563,546,1.563,547,1.563,548,1.563,549,1.26,550,1.563,551,1.563,552,1.563,553,1.26,554,1.563,555,1.563,556,1.563,557,1.563,558,1.563,559,1.563,560,1.563,561,1.563,562,1.563,563,1.563,564,1.563,565,1.563,566,1.563,567,1.563]],["title/interfaces/LoggingServiceConfiguration.html",[189,0.455,468,1.586]],["body/interfaces/LoggingServiceConfiguration.html",[1,2.005,3,0.298,4,0.458,5,0.375,8,0.546,11,0.699,17,1.097,19,0.052,27,0.298,28,1.097,44,2.467,52,0.578,53,1.059,117,1.276,120,2.215,121,2.836,126,0.375,136,0.821,186,0.03,187,0.038,188,0.03,189,0.546,190,1.273,192,1.256,202,2.836,204,1.656,205,2.999,235,2.005,237,1.45,240,1.656,256,2.467,342,2.121,343,2.836,450,2.121,456,4.266,457,2.836,458,2.005,468,2.439,486,2.836,497,1.904,517,2.631,568,2.215,569,2.631,570,4.178,571,4.178,572,3.918,573,3.716,574,2.467]],["title/modules/LoggingServiceModule.html",[575,2.191,576,1.586]],["body/modules/LoggingServiceModule.html",[0,0.378,3,0.378,4,0.581,5,0.477,19,0.051,117,1.088,118,2.417,126,0.477,186,0.038,187,0.044,188,0.038,568,2.812,576,2.822,577,2.812,578,4.141,579,3.899,580,3.34,581,4.141,582,4.141]],["title/classes/MemoryAppender.html",[0,0.248,458,1.06]],["body/classes/MemoryAppender.html",[0,0.159,2,0.679,3,0.159,4,0.244,5,0.2,7,1.015,8,0.699,9,1.836,11,0.729,12,1.358,17,1.331,18,1.359,19,0.052,26,1.118,27,0.159,28,0.703,29,1.813,31,0.917,32,2.488,33,1.359,41,2.139,42,0.773,43,1.817,45,1.641,47,1.359,48,1.896,49,1.189,50,1.543,51,1.385,52,0.455,53,0.778,56,1.657,59,1.414,61,1.817,62,2.215,63,1.403,64,1.817,65,1.189,66,1.562,67,2.488,68,1.753,69,2.187,70,1.562,72,1.562,73,1.044,74,1.359,75,1.359,76,1.817,78,1.359,80,1.461,84,1.181,87,1.562,88,1.359,89,1.562,90,1.562,93,2.488,98,1.817,109,1.403,115,1.628,116,0.448,117,1.039,119,0.917,121,1.015,124,0.596,125,0.883,126,0.2,127,1.015,128,1.181,129,1.758,130,1.562,135,1.181,137,1.758,138,1.181,158,1.181,160,1.015,163,1.817,169,1.359,171,1.044,172,1.015,173,1.015,174,1.181,175,1.181,177,1.356,186,0.016,187,0.024,188,0.016,192,0.805,198,1.189,209,1.181,223,0.523,224,1.181,225,1.015,227,0.596,238,2.488,239,1.817,247,1.86,251,2.488,252,2.955,254,2.488,255,2.159,257,1.403,264,2.747,265,1.997,267,2.439,274,2.488,275,2.159,277,2.159,278,2.159,279,2.837,280,2.159,281,2.955,282,1.817,284,0.773,285,1.015,286,1.181,287,1.403,288,1.905,289,1.817,290,1.562,291,1.817,292,1.817,293,2.955,302,2.159,304,2.159,314,1.403,315,1.181,316,1.403,317,1.403,318,2.631,319,3.369,320,1.403,321,1.181,322,1.403,323,1.403,324,1.015,325,1.403,326,0.883,327,1.403,328,1.403,329,1.403,335,1.403,390,1.181,458,1.63,497,2.795,508,2.159,553,1.403,574,2.21,583,3.195,584,2.677,585,2.677,586,2.677,587,2.159,588,2.677,589,1.739,590,1.739,591,1.739,592,1.739,593,1.739,594,2.677,595,2.677,596,4.352,597,2.955,598,2.159,599,2.159,600,2.677,601,2.159,602,1.739,603,2.677,604,1.739,605,1.739,606,2.677,607,1.739,608,2.677]],["title/interfaces/MemoryAppenderConfiguration.html",[189,0.455,574,1.379]],["body/interfaces/MemoryAppenderConfiguration.html",[3,0.444,4,0.515,5,0.422,8,0.615,9,1.755,11,0.753,12,1.181,17,0.964,19,0.051,26,1.814,27,0.335,28,1.181,52,0.518,53,0.996,60,1.181,80,1.563,116,0.814,126,0.422,136,0.884,186,0.034,187,0.041,188,0.034,189,0.615,190,1.432,191,1.863,192,1.524,193,2.625,194,2.283,195,1.352,196,1.541,197,1.541,247,2.573,264,2.625,267,2.625,288,2.625,458,1.432,574,2.283,583,2.492]],["title/coverage.html",[609,2.985]],["body/coverage.html",[0,0.481,1,1.398,5,0.412,6,3.008,7,2.808,19,0.051,44,1.819,48,1.398,52,0.412,122,2.091,124,1.228,186,0.033,187,0.04,188,0.033,189,0.881,191,2.552,202,2.091,203,2.889,204,1.819,206,2.889,207,2.889,223,1.077,235,1.398,236,3.008,237,1.969,256,1.819,265,1.592,338,2.586,339,2.889,377,2.889,380,2.889,449,2.091,450,1.819,452,2.889,458,1.398,468,2.091,568,2.432,569,2.889,574,1.819,583,3.008,609,2.889,610,2.889,611,3.582,612,3.582,613,5.541,614,3.582,615,3.582,616,3.582,617,4.431,618,4.431,619,3.582,620,4.431,621,3.582,622,3.582,623,3.582,624,3.582,625,3.582]],["title/dependencies.html",[626,2.272,627,2.217]],["body/dependencies.html",[19,0.05,118,2.503,119,1.47,186,0.039,187,0.045,188,0.039,627,3.349,628,4.288,629,4.288,630,4.288,631,3.978]],["title/miscellaneous/enumerations.html",[632,1.832,633,2.633]],["body/miscellaneous/enumerations.html",[3,0.388,19,0.045,27,0.388,60,1.114,73,1.655,136,0.834,186,0.039,187,0.045,188,0.039,195,1.275,196,1.454,197,1.454,284,2.178,338,2.476,342,2.153,632,3.42,633,3.42,634,4.241,635,4.902]],["title/index.html",[27,0.208,636,2.272,637,2.272]],["body/index.html",[0,0.359,1,1.534,3,0.417,9,1.534,10,2.397,11,0.862,12,1.281,13,2.018,17,1.033,19,0.051,27,0.183,29,0.685,31,0.685,33,1.996,42,0.888,45,0.685,49,0.888,51,0.6,52,0.409,59,1.067,60,1.104,65,0.888,69,0.888,73,1.829,74,1.014,80,1.067,86,1.509,115,0.888,116,0.334,117,0.781,126,0.452,129,0.888,136,0.773,171,1.385,177,1.019,186,0.027,187,0.027,188,0.018,192,0.893,195,1.324,196,1.348,197,1.441,198,0.888,201,2.41,204,1.996,205,2.295,209,1.356,212,2.397,223,1.522,227,1.735,235,1.534,237,1.321,238,2.018,239,2.41,240,1.509,284,1.321,290,1.166,321,2.018,326,1.509,342,1.802,343,1.356,352,1.611,378,1.356,381,1.611,382,2.397,383,2.397,394,2.397,421,1.611,444,1.356,446,1.356,447,2.41,450,2.237,453,3.171,455,2.397,457,2.67,458,1.64,459,2.397,475,2.397,479,2.863,486,2.67,494,1.611,497,1.735,499,2.397,549,1.611,572,2.863,573,1.611,576,1.735,579,1.611,580,1.611,587,1.611,597,2.863,598,1.611,599,3.171,601,1.611,610,1.611,627,1.356,631,2.397,638,4.791,639,1.998,640,1.998,641,1.998,642,3.55,643,1.998,644,1.998,645,2.973,646,1.998,647,2.973,648,1.998,649,2.973,650,3.55,651,1.998,652,2.973,653,1.998,654,1.998,655,1.998,656,1.998,657,1.998,658,2.973,659,1.998,660,1.998,661,1.998,662,1.998,663,1.998,664,1.998,665,1.998,666,1.998,667,1.998,668,2.973,669,2.973,670,1.998,671,1.998,672,1.998,673,2.973,674,2.973,675,1.998,676,2.973,677,3.932,678,1.998,679,1.998,680,2.973,681,3.932,682,1.998,683,1.998,684,3.55,685,2.973,686,2.973,687,1.998,688,3.932,689,1.998,690,1.998,691,1.998,692,1.998,693,4.203,694,1.998,695,2.973,696,1.998,697,1.998,698,1.998,699,1.998,700,1.998,701,1.998,702,1.998,703,1.998,704,1.998,705,1.998,706,2.973,707,2.973,708,1.998,709,1.998,710,1.998,711,1.998,712,1.998,713,2.973,714,1.998,715,1.998,716,1.998,717,1.998,718,1.998,719,1.998,720,2.973,721,1.998,722,2.973,723,1.998,724,2.973,725,1.998,726,1.998,727,2.973,728,1.998,729,1.998,730,2.973,731,2.973,732,2.973,733,1.998,734,1.998,735,2.973,736,1.998,737,3.55,738,1.998,739,1.998,740,1.998,741,1.998,742,1.998,743,1.998,744,1.998,745,1.998,746,1.998,747,1.998,748,1.998,749,1.998,750,1.998,751,1.998,752,1.998,753,1.998,754,1.998,755,1.998,756,1.998,757,1.998,758,1.998,759,2.973,760,2.973,761,1.998,762,1.998,763,2.973,764,1.998,765,1.998,766,1.998,767,1.998,768,1.998,769,1.998,770,1.998,771,1.998,772,1.998,773,1.998,774,1.998,775,1.998,776,1.998,777,1.998,778,1.998,779,1.998,780,1.998,781,1.998,782,2.973,783,1.998,784,1.998,785,1.998,786,2.973,787,1.998,788,2.973]],["title/modules.html",[577,2.513]],["body/modules.html",[19,0.046,186,0.04,187,0.046,188,0.04,576,2.554,577,2.971,789,4.375]],["title/overview.html",[790,2.985]],["body/overview.html",[2,1.684,19,0.045,132,3.362,186,0.039,187,0.045,188,0.039,190,1.684,449,2.52,575,3.481,790,3.481,791,4.952]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":134,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["1",{"_index":132,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"overview.html":{}}}],["1.2.1",{"_index":661,"title":{},"body":{"index.html":{}}}],["1.4.15",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":23,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["10/10",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["18:49:43.794",{"_index":692,"title":{},"body":{"index.html":{}}}],["18:49:43.797",{"_index":694,"title":{},"body":{"index.html":{}}}],["18:49:43.801",{"_index":695,"title":{},"body":{"index.html":{}}}],["18:49:43.814",{"_index":698,"title":{},"body":{"index.html":{}}}],["2",{"_index":699,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":658,"title":{},"body":{"index.html":{}}}],["2.2.0",{"_index":659,"title":{},"body":{"index.html":{}}}],["2.2.1",{"_index":662,"title":{},"body":{"index.html":{}}}],["2.4.8",{"_index":660,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":288,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["3.0.0",{"_index":657,"title":{},"body":{"index.html":{}}}],["3.1.0",{"_index":656,"title":{},"body":{"index.html":{}}}],["3.9.0",{"_index":655,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":650,"title":{},"body":{"index.html":{}}}],["4.7.0",{"_index":648,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":696,"title":{},"body":{"index.html":{}}}],["5",{"_index":700,"title":{},"body":{"index.html":{}}}],["5.0.0",{"_index":642,"title":{},"body":{"index.html":{}}}],["5.1.0",{"_index":654,"title":{},"body":{"index.html":{}}}],["5/5",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":248,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["6",{"_index":791,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":652,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":25,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["7.0.0",{"_index":649,"title":{},"body":{"index.html":{}}}],["8",{"_index":153,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["8.0.0",{"_index":647,"title":{},"body":{"index.html":{}}}],["9.0.0",{"_index":631,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["99]logger",{"_index":701,"title":{},"body":{"index.html":{}}}],["a.b",{"_index":725,"title":{},"body":{"index.html":{}}}],["a.b.c",{"_index":724,"title":{},"body":{"index.html":{}}}],["a.b.c.d",{"_index":722,"title":{},"body":{"index.html":{}}}],["a.tostring",{"_index":552,"title":{},"body":{"injectables/LoggingService.html":{}}}],["add",{"_index":321,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["added",{"_index":496,"title":{},"body":{"injectables/LoggingService.html":{}}}],["additional",{"_index":786,"title":{},"body":{"index.html":{}}}],["additionally",{"_index":726,"title":{},"body":{"index.html":{}}}],["ajax",{"_index":120,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["ajaxappender",{"_index":1,"title":{"classes/AjaxAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["ajaxappender(configuration.ajaxappender",{"_index":539,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.appenderfailed.subscribe((message",{"_index":540,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.batchsizedefault",{"_index":162,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.thresholddefault",{"_index":164,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.timerintervaldefault",{"_index":166,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappenderconfiguration",{"_index":44,"title":{"interfaces/AjaxAppenderConfiguration.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["ajaxappenderfailed",{"_index":461,"title":{},"body":{"injectables/LoggingService.html":{}}}],["alerts",{"_index":509,"title":{},"body":{"injectables/LoggingService.html":{}}}],["allows",{"_index":280,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["already",{"_index":315,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["amend",{"_index":460,"title":{},"body":{"injectables/LoggingService.html":{}}}],["angular",{"_index":646,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":118,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"dependencies.html":{}}}],["anything",{"_index":586,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["api",{"_index":788,"title":{},"body":{"index.html":{}}}],["app",{"_index":707,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":770,"title":{},"body":{"index.html":{}}}],["app_initializer",{"_index":778,"title":{},"body":{"index.html":{}}}],["append",{"_index":32,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["append(loggingevent",{"_index":61,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appended",{"_index":67,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender",{"_index":9,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["appender's",{"_index":93,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration",{"_index":121,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration.ts",{"_index":191,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["appender.model",{"_index":501,"title":{},"body":{"injectables/LoggingService.html":{}}}],["appender.model.ts",{"_index":7,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["appender.model.ts:101",{"_index":260,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:104",{"_index":63,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:111",{"_index":592,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:113",{"_index":114,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:121",{"_index":84,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:128",{"_index":79,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:134",{"_index":591,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:136",{"_index":104,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:141",{"_index":593,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:143",{"_index":92,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:145",{"_index":283,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:150",{"_index":109,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:152",{"_index":261,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:157",{"_index":96,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:159",{"_index":266,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:165",{"_index":111,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:169",{"_index":276,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:190",{"_index":263,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:198",{"_index":258,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:33",{"_index":55,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:34",{"_index":257,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:36",{"_index":46,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:61",{"_index":590,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:69",{"_index":269,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:78",{"_index":589,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:81",{"_index":71,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:89",{"_index":273,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appenderfailed",{"_index":30,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appenders",{"_index":549,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["appenders.find((a",{"_index":551,"title":{},"body":{"injectables/LoggingService.html":{}}}],["application/json",{"_index":151,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appmodule",{"_index":674,"title":{},"body":{"index.html":{}}}],["apps",{"_index":665,"title":{},"body":{"index.html":{}}}],["arg",{"_index":408,"title":{},"body":{"classes/Logger.html":{}}}],["arg.tostring",{"_index":440,"title":{},"body":{"classes/Logger.html":{}}}],["args",{"_index":427,"title":{},"body":{"classes/Logger.html":{}}}],["args.push(this.formatargument(param",{"_index":428,"title":{},"body":{"classes/Logger.html":{}}}],["argument",{"_index":407,"title":{},"body":{"classes/Logger.html":{}}}],["array",{"_index":573,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["automatically",{"_index":723,"title":{},"body":{"index.html":{}}}],["available",{"_index":738,"title":{},"body":{"index.html":{}}}],["backend",{"_index":759,"title":{},"body":{"index.html":{}}}],["batch",{"_index":106,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["batchsize",{"_index":22,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["batchsizedefault",{"_index":131,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["behind",{"_index":548,"title":{},"body":{"injectables/LoggingService.html":{}}}],["below",{"_index":678,"title":{},"body":{"index.html":{}}}],["beta",{"_index":653,"title":{},"body":{"index.html":{}}}],["between",{"_index":100,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["browse",{"_index":789,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":517,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["browser's",{"_index":239,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["browserconsoleappender",{"_index":205,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["browserconsoleappenderconfiguration",{"_index":202,"title":{"interfaces/BrowserConsoleAppenderConfiguration.html":{}},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["builds",{"_index":718,"title":{},"body":{"index.html":{}}}],["built",{"_index":666,"title":{},"body":{"index.html":{}}}],["c",{"_index":522,"title":{},"body":{"injectables/LoggingService.html":{}}}],["call",{"_index":763,"title":{},"body":{"index.html":{}}}],["callback",{"_index":596,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["called",{"_index":597,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["case",{"_index":359,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["catch",{"_index":446,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["change",{"_index":494,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["changed",{"_index":167,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["charset=utf",{"_index":152,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["class",{"_index":0,"title":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"overview.html":{}}}],["clearlog",{"_index":249,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["code",{"_index":680,"title":{},"body":{"index.html":{}}}],["complete",{"_index":731,"title":{},"body":{"index.html":{}}}],["component",{"_index":702,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":17,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["configuration.ajaxappender",{"_index":538,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.batchsize",{"_index":161,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.browserconsoleappender",{"_index":558,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.browserconsoleappender.threshold",{"_index":559,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstorageappender",{"_index":543,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstoragekey",{"_index":297,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["configuration.loglevels",{"_index":533,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.maxmessages",{"_index":304,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.memoryappender",{"_index":556,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.threshold",{"_index":163,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.timerinterval",{"_index":165,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.url",{"_index":142,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configure",{"_index":33,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["configure(configuration",{"_index":70,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["configure](#configure",{"_index":504,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configurelogging",{"_index":780,"title":{},"body":{"index.html":{}}}],["configurelogging(loggingservice",{"_index":771,"title":{},"body":{"index.html":{}}}],["configures",{"_index":72,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["console",{"_index":204,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["consolelogs",{"_index":757,"title":{},"body":{"index.html":{}}}],["const",{"_index":171,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor(configuration",{"_index":43,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["constructor(logger",{"_index":388,"title":{},"body":{"classes/Logger.html":{}}}],["containing",{"_index":216,"title":{},"body":{"classes/JsonLayout.html":{}}}],["convertedthreshold",{"_index":172,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["converting",{"_index":341,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["converts",{"_index":350,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["correspond",{"_index":739,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":609,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":512,"title":{},"body":{"injectables/LoggingService.html":{}}}],["creates",{"_index":47,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["creating",{"_index":473,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ctor",{"_index":684,"title":{},"body":{"index.html":{}}}],["current",{"_index":480,"title":{},"body":{"injectables/LoggingService.html":{}}}],["currently",{"_index":277,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["data",{"_index":78,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["date",{"_index":379,"title":{},"body":{"interfaces/LogMessage.html":{}}}],["date(logmessage.timestamp",{"_index":312,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["debug",{"_index":195,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["debug(methodname",{"_index":391,"title":{},"body":{"classes/Logger.html":{}}}],["debugger",{"_index":518,"title":{},"body":{"injectables/LoggingService.html":{}}}],["declarations",{"_index":581,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["default",{"_index":192,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["define",{"_index":730,"title":{},"body":{"index.html":{}}}],["defined",{"_index":45,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["definition",{"_index":571,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["definitions",{"_index":781,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":627,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["depending",{"_index":74,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["deps",{"_index":774,"title":{},"body":{"index.html":{}}}],["derive",{"_index":487,"title":{},"body":{"injectables/LoggingService.html":{}}}],["describe",{"_index":705,"title":{},"body":{"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["development",{"_index":755,"title":{},"body":{"index.html":{}}}],["different",{"_index":343,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["disable",{"_index":746,"title":{},"body":{"index.html":{}}}],["disables",{"_index":748,"title":{},"body":{"index.html":{}}}],["display",{"_index":526,"title":{},"body":{"injectables/LoggingService.html":{}}}],["docs",{"_index":292,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["documentation",{"_index":610,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotnet",{"_index":715,"title":{},"body":{"index.html":{}}}],["dots",{"_index":712,"title":{},"body":{"index.html":{}}}],["during",{"_index":754,"title":{},"body":{"index.html":{}}}],["e",{"_index":447,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["e.g",{"_index":681,"title":{},"body":{"index.html":{}}}],["e.message",{"_index":448,"title":{},"body":{"classes/Logger.html":{}}}],["each",{"_index":82,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["element",{"_index":317,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["emitter",{"_index":513,"title":{},"body":{"injectables/LoggingService.html":{}}}],["empty",{"_index":141,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["enable",{"_index":745,"title":{},"body":{"index.html":{}}}],["enabled",{"_index":584,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["encapsulates",{"_index":663,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":546,"title":{},"body":{"injectables/LoggingService.html":{}}}],["entry",{"_index":382,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["entry(methodname",{"_index":397,"title":{},"body":{"classes/Logger.html":{}}}],["enumerations",{"_index":633,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":769,"title":{},"body":{"index.html":{}}}],["environment.ts",{"_index":768,"title":{},"body":{"index.html":{}}}],["error",{"_index":60,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["error(\"configuration",{"_index":140,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["error(\"localstoragekey",{"_index":298,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["error(\"url",{"_index":143,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["error(`invalid",{"_index":376,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["error(methodname",{"_index":399,"title":{},"body":{"classes/Logger.html":{}}}],["errors",{"_index":510,"title":{},"body":{"injectables/LoggingService.html":{}}}],["event",{"_index":56,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["eventemitter",{"_index":54,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["eventobj",{"_index":222,"title":{},"body":{"classes/JsonLayout.html":{}}}],["eventual",{"_index":547,"title":{},"body":{"injectables/LoggingService.html":{}}}],["example",{"_index":735,"title":{},"body":{"index.html":{}}}],["exist",{"_index":474,"title":{},"body":{"injectables/LoggingService.html":{}}}],["existing",{"_index":301,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["exit",{"_index":383,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["exit(methodname",{"_index":401,"title":{},"body":{"classes/Logger.html":{}}}],["export",{"_index":126,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["exports",{"_index":582,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["extends",{"_index":127,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["false",{"_index":149,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["fatal",{"_index":196,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["fatal(methodname",{"_index":403,"title":{},"body":{"classes/Logger.html":{}}}],["feedback",{"_index":761,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["finally",{"_index":679,"title":{},"body":{"index.html":{}}}],["first",{"_index":672,"title":{},"body":{"index.html":{}}}],["following",{"_index":455,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["follows",{"_index":741,"title":{},"body":{"index.html":{}}}],["format",{"_index":217,"title":{},"body":{"classes/JsonLayout.html":{}}}],["format(loggingevent",{"_index":218,"title":{},"body":{"classes/JsonLayout.html":{}}}],["formatargument",{"_index":384,"title":{},"body":{"classes/Logger.html":{}}}],["formatargument(arg",{"_index":405,"title":{},"body":{"classes/Logger.html":{}}}],["formats",{"_index":208,"title":{},"body":{"classes/JsonLayout.html":{},"classes/Logger.html":{}}}],["formatted",{"_index":396,"title":{},"body":{"classes/Logger.html":{}}}],["framework",{"_index":667,"title":{},"body":{"index.html":{}}}],["full",{"_index":316,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["function",{"_index":601,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["functionalities",{"_index":664,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":454,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getbatchsize",{"_index":34,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternalappender",{"_index":35,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternallogger",{"_index":385,"title":{},"body":{"classes/Logger.html":{}}}],["getlayout",{"_index":36,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getlocalstoragekey",{"_index":250,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["getlogger",{"_index":463,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogger(loggername",{"_index":470,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getloglevel",{"_index":386,"title":{},"body":{"classes/Logger.html":{}}}],["getlogmessages",{"_index":251,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["getlogmessagesfromlocalstorage",{"_index":464,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogmessagesfromlocalstorage(localstoragekey",{"_index":482,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getmaxmessages",{"_index":252,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["getrootlogger",{"_index":465,"title":{},"body":{"injectables/LoggingService.html":{}}}],["gets",{"_index":115,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["gettimerinterval",{"_index":37,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getting",{"_index":636,"title":{"index.html":{}},"body":{}}],["given",{"_index":75,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["greater",{"_index":750,"title":{},"body":{"index.html":{}}}],["happen",{"_index":495,"title":{},"body":{"injectables/LoggingService.html":{}}}],["hello",{"_index":697,"title":{},"body":{"index.html":{}}}],["helper",{"_index":340,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["here",{"_index":443,"title":{},"body":{"classes/Logger.html":{}}}],["hierarchy",{"_index":720,"title":{},"body":{"index.html":{}}}],["higher",{"_index":784,"title":{},"body":{"index.html":{}}}],["http",{"_index":15,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["https://my.backend.xy/loggingbackend",{"_index":21,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["identifier",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["immediatedly",{"_index":199,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["implemenatation",{"_index":211,"title":{},"body":{"classes/JsonLayout.html":{}}}],["import",{"_index":117,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["important",{"_index":728,"title":{},"body":{"index.html":{}}}],["imports",{"_index":580,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["improvement",{"_index":214,"title":{},"body":{"classes/JsonLayout.html":{}}}],["included",{"_index":743,"title":{},"body":{"index.html":{}}}],["includes",{"_index":736,"title":{},"body":{"index.html":{}}}],["index",{"_index":27,"title":{"index.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info(methodname",{"_index":413,"title":{},"body":{"classes/Logger.html":{}}}],["inform",{"_index":605,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["inherit",{"_index":729,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":449,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":451,"title":{},"body":{"injectables/LoggingService.html":{}}}],["instance",{"_index":49,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["instanceof",{"_index":441,"title":{},"body":{"classes/Logger.html":{}}}],["instead",{"_index":783,"title":{},"body":{"index.html":{}}}],["intended",{"_index":744,"title":{},"body":{"index.html":{}}}],["interface",{"_index":189,"title":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["interfaces",{"_index":190,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"overview.html":{}}}],["internal",{"_index":351,"title":{},"body":{"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["internally",{"_index":85,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["interval",{"_index":113,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["ionic",{"_index":638,"title":{},"body":{"index.html":{}}}],["ionic.logging.ajaxappender",{"_index":178,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ionic.logging.jsonlayout",{"_index":234,"title":{},"body":{"classes/JsonLayout.html":{}}}],["ionic.logging.localstorageappender",{"_index":334,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["ionic.logging.memoryappender",{"_index":553,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["java",{"_index":717,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":200,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/JsonLayout.html":{}}}],["json",{"_index":18,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["json.parse(localstorage.getitem(localstoragekey",{"_index":308,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["json.stringify",{"_index":442,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(arg",{"_index":445,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(eventobj",{"_index":233,"title":{},"body":{"classes/JsonLayout.html":{}}}],["json.stringify(this.logmessages",{"_index":333,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["jsonlayout",{"_index":122,"title":{"classes/JsonLayout.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"coverage.html":{}}}],["jsonlayout(false",{"_index":148,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["keeps",{"_index":760,"title":{},"body":{"index.html":{}}}],["key",{"_index":243,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["keyword",{"_index":296,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["kind",{"_index":719,"title":{},"body":{"index.html":{}}}],["last",{"_index":477,"title":{},"body":{"injectables/LoggingService.html":{}}}],["later",{"_index":758,"title":{},"body":{"index.html":{}}}],["latest",{"_index":639,"title":{},"body":{"index.html":{}}}],["layout",{"_index":94,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["layout's",{"_index":221,"title":{},"body":{"classes/JsonLayout.html":{}}}],["layout.model",{"_index":123,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["layout.model.ts",{"_index":207,"title":{},"body":{"classes/JsonLayout.html":{},"coverage.html":{}}}],["layout.model.ts:14",{"_index":219,"title":{},"body":{"classes/JsonLayout.html":{}}}],["layout.model.ts:30",{"_index":220,"title":{},"body":{"classes/JsonLayout.html":{}}}],["length",{"_index":97,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["level",{"_index":227,"title":{},"body":{"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["level.converter",{"_index":125,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["level.converter.ts",{"_index":339,"title":{},"body":{"classes/LogLevelConverter.html":{},"coverage.html":{}}}],["level.converter.ts:15",{"_index":349,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:43",{"_index":354,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:71",{"_index":357,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.loggername",{"_index":534,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.loglevel",{"_index":537,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.model",{"_index":285,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["level.model.ts",{"_index":635,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["level.warn",{"_index":762,"title":{},"body":{"index.html":{}}}],["levelfromlog4javascript",{"_index":344,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromlog4javascript(level",{"_index":347,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring",{"_index":345,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring(level",{"_index":353,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levels",{"_index":342,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["leveltolog4javascript",{"_index":346,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["leveltolog4javascript(level",{"_index":356,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["limited",{"_index":481,"title":{},"body":{"injectables/LoggingService.html":{}}}],["line:completed",{"_index":291,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["line:no",{"_index":294,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["load",{"_index":270,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loadlogmessages",{"_index":253,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loadlogmessages(localstoragekey",{"_index":268,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loads",{"_index":484,"title":{},"body":{"injectables/LoggingService.html":{}}}],["local",{"_index":240,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["localstorage",{"_index":331,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.getitem(localstoragekey",{"_index":307,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.removeitem(localstoragekey",{"_index":313,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.removeitem(this.localstoragekey",{"_index":337,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.setitem(this.localstoragekey",{"_index":332,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender",{"_index":235,"title":{"classes/LocalStorageAppender.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["localstorageappender(configuration.localstorageappender",{"_index":544,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.loadlogmessages(localstoragekey",{"_index":565,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.loadlogmessages(this.localstoragekey",{"_index":303,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.maxmessagesdefault",{"_index":305,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.removelogmessages(localstoragekey",{"_index":567,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.thresholddefault",{"_index":306,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappenderconfiguration",{"_index":256,"title":{"interfaces/LocalStorageAppenderConfiguration.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["localstoragekey",{"_index":245,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["log",{"_index":11,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["log4javascript",{"_index":119,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"dependencies.html":{}}}],["log4javascript's",{"_index":352,"title":{},"body":{"classes/LogLevelConverter.html":{},"index.html":{}}}],["log4javascript.ajaxappender",{"_index":91,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.ajaxappender(configuration.url",{"_index":145,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.appender",{"_index":128,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.browserconsoleappender",{"_index":506,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(level.loggername",{"_index":535,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(logger",{"_index":423,"title":{},"body":{"classes/Logger.html":{}}}],["log4javascript.getrootlogger",{"_index":422,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(ajaxappender",{"_index":542,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(localstorageappender",{"_index":545,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(memoryappender",{"_index":555,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().removeappender(memoryappender",{"_index":554,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.jsonlayout",{"_index":213,"title":{},"body":{"classes/JsonLayout.html":{}}}],["log4javascript.layout",{"_index":95,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.level",{"_index":348,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.all",{"_index":360,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.debug",{"_index":362,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.error",{"_index":364,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.fatal",{"_index":366,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.info",{"_index":368,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.off",{"_index":370,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.trace",{"_index":372,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.warn",{"_index":374,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.logger",{"_index":411,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.loggingevent",{"_index":62,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.loglog.setquietmode(true",{"_index":511,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.patternlayout(\"%d{hh:mm:ss,sss",{"_index":521,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logged",{"_index":394,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["logger",{"_index":223,"title":{"classes/Logger.html":{}},"body":{"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["logger's",{"_index":733,"title":{},"body":{"index.html":{}}}],["logger().getinternallogger().geteffectiveappenders",{"_index":550,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger(loggername",{"_index":562,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.browserconsoleappender",{"_index":525,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.memoryappender",{"_index":532,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.model",{"_index":502,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(log4javascript.level.warn",{"_index":516,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(loglevelconverter.leveltolog4javascript(loglevelconverter.levelfromstring(level.loglevel",{"_index":536,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loggername",{"_index":475,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["loggers",{"_index":486,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logging",{"_index":73,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loggingconfiguration",{"_index":765,"title":{},"body":{"index.html":{}}}],["loggingevent",{"_index":66,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.getcombinedmessages",{"_index":231,"title":{},"body":{"classes/JsonLayout.html":{}}}],["loggingevent.level.tostring",{"_index":228,"title":{},"body":{"classes/JsonLayout.html":{}}}],["loggingevent.logger",{"_index":323,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logger.name",{"_index":224,"title":{},"body":{"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages",{"_index":232,"title":{},"body":{"classes/JsonLayout.html":{}}}],["loggingevent.messages.slice(1",{"_index":325,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages[0",{"_index":327,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.timestamp",{"_index":328,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.timestampinmilliseconds",{"_index":226,"title":{},"body":{"classes/JsonLayout.html":{}}}],["loggingservice",{"_index":450,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["loggingservice.configure(environment.logging",{"_index":772,"title":{},"body":{"index.html":{}}}],["loggingservice.getlogger(\"myapp.mycomponent",{"_index":683,"title":{},"body":{"index.html":{}}}],["loggingserviceconfiguration",{"_index":468,"title":{"interfaces/LoggingServiceConfiguration.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["loggingservicemodule",{"_index":576,"title":{"modules/LoggingServiceModule.html":{}},"body":{"modules/LoggingServiceModule.html":{},"index.html":{},"modules.html":{}}}],["loglevel",{"_index":284,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loglevel.all",{"_index":361,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.debug",{"_index":363,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.error",{"_index":365,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.fatal",{"_index":367,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.info",{"_index":369,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.off",{"_index":371,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.trace",{"_index":373,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.warn",{"_index":375,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel[loglevelconverter.levelfromlog4javascript(loggingevent.level",{"_index":322,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter",{"_index":124,"title":{"classes/LogLevelConverter.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["loglevelconverter.levelfromlog4javascript(this.logger.getlevel",{"_index":424,"title":{},"body":{"classes/Logger.html":{}}}],["loglevelconverter.levelfromstring(configuration.browserconsoleappender.threshold",{"_index":560,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loglevelconverter.levelfromstring(configuration.threshold",{"_index":174,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter.leveltolog4javascript",{"_index":173,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["loglevels",{"_index":572,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logmessage",{"_index":265,"title":{"interfaces/LogMessage.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["logmessage.timestamp",{"_index":311,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["logmessages",{"_index":293,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["logmessageschanged",{"_index":462,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logs",{"_index":201,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/Logger.html":{},"index.html":{}}}],["look",{"_index":669,"title":{},"body":{"index.html":{}}}],["lower",{"_index":749,"title":{},"body":{"index.html":{}}}],["m",{"_index":523,"title":{},"body":{"injectables/LoggingService.html":{}}}],["mainly",{"_index":87,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["make",{"_index":752,"title":{},"body":{"index.html":{}}}],["massages",{"_index":498,"title":{},"body":{"injectables/LoggingService.html":{}}}],["matching",{"_index":187,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["maximum",{"_index":267,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessages",{"_index":247,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessagesdefault",{"_index":287,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["meaning",{"_index":751,"title":{},"body":{"index.html":{}}}],["means",{"_index":479,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["memory",{"_index":497,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["memoryappender",{"_index":458,"title":{"classes/MemoryAppender.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["memoryappender.maxmessagesdefault",{"_index":603,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender.thresholddefault",{"_index":604,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender](../memoryappender.html",{"_index":563,"title":{},"body":{"injectables/LoggingService.html":{}}}],["memoryappenderconfiguration",{"_index":574,"title":{"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["message",{"_index":59,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["message.model",{"_index":286,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["message.model.ts",{"_index":377,"title":{},"body":{"interfaces/LogMessage.html":{},"coverage.html":{}}}],["messages",{"_index":12,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["method",{"_index":65,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methodname",{"_index":326,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methods",{"_index":31,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["milliseconds",{"_index":99,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["miscellaneous",{"_index":632,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["modified",{"_index":77,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["module",{"_index":575,"title":{"modules/LoggingServiceModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":577,"title":{"modules.html":{}},"body":{"modules/LoggingServiceModule.html":{},"modules.html":{}}}],["more",{"_index":278,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["much",{"_index":335,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["multi",{"_index":775,"title":{},"body":{"index.html":{}}}],["myapp.mycomponent",{"_index":693,"title":{},"body":{"index.html":{}}}],["myapp.mynamespace.mylogger",{"_index":782,"title":{},"body":{"index.html":{}}}],["mycomponent",{"_index":682,"title":{},"body":{"index.html":{}}}],["mylogs",{"_index":246,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["mymethod",{"_index":688,"title":{},"body":{"index.html":{}}}],["mymethod(index",{"_index":687,"title":{},"body":{"index.html":{}}}],["name",{"_index":51,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["named",{"_index":721,"title":{},"body":{"index.html":{}}}],["namespaces",{"_index":714,"title":{},"body":{"index.html":{}}}],["need",{"_index":673,"title":{},"body":{"index.html":{}}}],["needed",{"_index":641,"title":{},"body":{"index.html":{}}}],["new",{"_index":48,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["next",{"_index":290,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["ngmodule",{"_index":579,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["notation",{"_index":210,"title":{},"body":{"classes/JsonLayout.html":{}}}],["null",{"_index":295,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["number",{"_index":80,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["object",{"_index":209,"title":{},"body":{"classes/JsonLayout.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["objects",{"_index":395,"title":{},"body":{"classes/Logger.html":{}}}],["older",{"_index":643,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":281,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["one",{"_index":499,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["onlogmessageschangedcallback",{"_index":602,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["optional",{"_index":53,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["ordered",{"_index":740,"title":{},"body":{"index.html":{}}}],["output",{"_index":691,"title":{},"body":{"index.html":{}}}],["overview",{"_index":790,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":76,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["package",{"_index":626,"title":{"dependencies.html":{}},"body":{}}],["packages",{"_index":716,"title":{},"body":{"index.html":{}}}],["page",{"_index":527,"title":{},"body":{"injectables/LoggingService.html":{}}}],["par",{"_index":734,"title":{},"body":{"index.html":{}}}],["param",{"_index":137,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["params",{"_index":392,"title":{},"body":{"classes/Logger.html":{}}}],["parent",{"_index":727,"title":{},"body":{"index.html":{}}}],["partial",{"_index":570,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["parts",{"_index":710,"title":{},"body":{"index.html":{}}}],["peer",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":704,"title":{},"body":{"index.html":{}}}],["place",{"_index":706,"title":{},"body":{"index.html":{}}}],["placed",{"_index":708,"title":{},"body":{"index.html":{}}}],["possible",{"_index":459,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["potentially",{"_index":493,"title":{},"body":{"injectables/LoggingService.html":{}}}],["prevent",{"_index":507,"title":{},"body":{"injectables/LoggingService.html":{}}}],["private",{"_index":129,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["process",{"_index":158,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["produce",{"_index":690,"title":{},"body":{"index.html":{}}}],["properties",{"_index":28,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["provide",{"_index":777,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":505,"title":{},"body":{"injectables/LoggingService.html":{}}}],["providers",{"_index":773,"title":{},"body":{"index.html":{}}}],["public",{"_index":29,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["purposes",{"_index":90,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["queued",{"_index":102,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["quite",{"_index":713,"title":{},"body":{"index.html":{}}}],["rc",{"_index":651,"title":{},"body":{"index.html":{}}}],["read",{"_index":300,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["realtime",{"_index":600,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["recommended",{"_index":766,"title":{},"body":{"index.html":{}}}],["registers",{"_index":595,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["remaining",{"_index":159,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["remove",{"_index":274,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removed",{"_index":282,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removelogmessages",{"_index":254,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removelogmessages(localstoragekey",{"_index":272,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["removelogmessagesfromlocalstorage",{"_index":466,"title":{},"body":{"injectables/LoggingService.html":{}}}],["removelogmessagesfromlocalstorage(localstoragekey",{"_index":489,"title":{},"body":{"injectables/LoggingService.html":{}}}],["removes",{"_index":259,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{}}}],["representation",{"_index":355,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["request",{"_index":83,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["respectively",{"_index":747,"title":{},"body":{"index.html":{}}}],["responsible",{"_index":703,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":785,"title":{},"body":{"index.html":{}}}],["result",{"_index":186,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":188,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["retrieved",{"_index":478,"title":{},"body":{"injectables/LoggingService.html":{}}}],["return",{"_index":177,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["returns",{"_index":68,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["root",{"_index":457,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["same",{"_index":212,"title":{},"body":{"classes/JsonLayout.html":{},"index.html":{}}}],["sample",{"_index":668,"title":{},"body":{"index.html":{}}}],["saved",{"_index":241,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["see",{"_index":677,"title":{},"body":{"index.html":{}}}],["send",{"_index":58,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["sending",{"_index":101,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["sends",{"_index":10,"title":{},"body":{"classes/AjaxAppender.html":{},"index.html":{}}}],["sent",{"_index":81,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["separated",{"_index":711,"title":{},"body":{"index.html":{}}}],["serialized",{"_index":242,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["serializing",{"_index":215,"title":{},"body":{"classes/JsonLayout.html":{}}}],["serve",{"_index":756,"title":{},"body":{"index.html":{}}}],["server",{"_index":13,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["service",{"_index":453,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["service.configuration",{"_index":503,"title":{},"body":{"injectables/LoggingService.html":{}}}],["service.configuration.ts",{"_index":569,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["service.module.ts",{"_index":578,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["set",{"_index":198,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["setbatchsize",{"_index":38,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setbatchsize(batchsize",{"_index":103,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout",{"_index":39,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout(layout",{"_index":108,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setloglevel",{"_index":387,"title":{},"body":{"classes/Logger.html":{}}}],["setloglevel(level",{"_index":415,"title":{},"body":{"classes/Logger.html":{}}}],["setmaxmessages",{"_index":255,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setmaxmessages(value",{"_index":275,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback",{"_index":588,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback(callback",{"_index":594,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["sets",{"_index":105,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval",{"_index":40,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval(timerinterval",{"_index":110,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setting",{"_index":732,"title":{},"body":{"index.html":{}}}],["settings",{"_index":456,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["severe",{"_index":742,"title":{},"body":{"index.html":{}}}],["severity",{"_index":737,"title":{},"body":{"index.html":{}}}],["show",{"_index":508,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["single",{"_index":709,"title":{},"body":{"index.html":{}}}],["size",{"_index":107,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["spcific",{"_index":500,"title":{},"body":{"injectables/LoggingService.html":{}}}],["specific",{"_index":64,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["specified",{"_index":472,"title":{},"body":{"injectables/LoggingService.html":{}}}],["specify",{"_index":585,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["src/.../log",{"_index":634,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/lib/ajax",{"_index":6,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/browser",{"_index":203,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/json",{"_index":206,"title":{},"body":{"classes/JsonLayout.html":{},"coverage.html":{}}}],["src/lib/local",{"_index":236,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/log",{"_index":338,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/logger.model.ts",{"_index":380,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["src/lib/logger.model.ts:11",{"_index":389,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:112",{"_index":400,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:128",{"_index":404,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:145",{"_index":398,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:164",{"_index":402,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:179",{"_index":406,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:199",{"_index":409,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:29",{"_index":412,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:38",{"_index":416,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:48",{"_index":418,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:64",{"_index":393,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:80",{"_index":414,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:96",{"_index":420,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logging",{"_index":568,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts",{"_index":452,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts:149",{"_index":485,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:158",{"_index":471,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:170",{"_index":476,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:179",{"_index":483,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:186",{"_index":488,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:195",{"_index":490,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:34",{"_index":492,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:40",{"_index":491,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:44",{"_index":467,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:83",{"_index":469,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/memory",{"_index":583,"title":{},"body":{"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["started",{"_index":637,"title":{"index.html":{}},"body":{}}],["statements",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":130,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/MemoryAppender.html":{}}}],["step",{"_index":675,"title":{},"body":{"index.html":{}}}],["storage",{"_index":237,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["store",{"_index":262,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{}}}],["stored",{"_index":264,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["stores",{"_index":238,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["storing",{"_index":244,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["string",{"_index":116,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["strings",{"_index":310,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["super",{"_index":138,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["switch",{"_index":358,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["table",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":764,"title":{},"body":{"index.html":{}}}],["testing",{"_index":89,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["tests",{"_index":410,"title":{},"body":{"classes/Logger.html":{}}}],["therefore",{"_index":336,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.ajaxappender",{"_index":144,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.addheader(\"content",{"_index":150,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.append(loggingevent",{"_index":176,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getbatchsize",{"_index":179,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getlayout",{"_index":181,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.gettimerinterval",{"_index":183,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setbatchsize(batchsize",{"_index":180,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setfailcallback((message",{"_index":156,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(layout",{"_index":182,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(new",{"_index":147,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setsendallonunload(true",{"_index":154,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimed(timerinterval",{"_index":184,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimerinterval(timerinterval",{"_index":185,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappenderfailed",{"_index":515,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.ajaxappenderfailed.emit(message",{"_index":541,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.appenderfailed",{"_index":155,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.appenderfailed.emit(message",{"_index":157,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.browserconsoleappender",{"_index":519,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setlayout(new",{"_index":520,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(convertedthreshold",{"_index":561,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(log4javascript.level.all",{"_index":524,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.configure",{"_index":160,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["this.iscombinedmessages",{"_index":230,"title":{},"body":{"classes/JsonLayout.html":{}}}],["this.localstoragekey",{"_index":299,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.logger",{"_index":421,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["this.logger.debug.apply(this.logger",{"_index":431,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.entry(methodname",{"_index":685,"title":{},"body":{"index.html":{}}}],["this.logger.error(methodname",{"_index":689,"title":{},"body":{"index.html":{}}}],["this.logger.error.apply(this.logger",{"_index":437,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.exit(methodname",{"_index":686,"title":{},"body":{"index.html":{}}}],["this.logger.fatal.apply(this.logger",{"_index":439,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.info.apply(this.logger",{"_index":433,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isdebugenabled",{"_index":430,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iserrorenabled",{"_index":436,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isfatalenabled",{"_index":438,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isinfoenabled",{"_index":432,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.istraceenabled",{"_index":426,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iswarnenabled",{"_index":434,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.setlevel(loglevelconverter.leveltolog4javascript(level",{"_index":425,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.trace.apply(this.logger",{"_index":429,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.warn.apply(this.logger",{"_index":435,"title":{},"body":{"classes/Logger.html":{}}}],["this.logmessages",{"_index":302,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.length",{"_index":318,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.push(message",{"_index":329,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.shift",{"_index":320,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.splice(0",{"_index":608,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.logmessageschanged",{"_index":514,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.logmessageschanged.emit",{"_index":531,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.maxmessages",{"_index":319,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.memoryappender",{"_index":528,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.configure(configuration.memoryappender",{"_index":557,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.getlogmessages",{"_index":564,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.removelogmessages",{"_index":566,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setlayout(new",{"_index":529,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setonlogmessageschangedcallback((message",{"_index":530,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.onlogmessageschangedcallback",{"_index":606,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.onlogmessageschangedcallback(message",{"_index":607,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.setbatchsize(configuration.batchsize",{"_index":168,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.setmaxmessages(configuration.maxmessages",{"_index":314,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.setthreshold(convertedthreshold",{"_index":175,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.settimerinterval(configuration.timerinterval",{"_index":170,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.url",{"_index":146,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["threshold",{"_index":26,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["thresholddefault",{"_index":135,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["throw",{"_index":139,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["time",{"_index":98,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timer",{"_index":112,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timerinterval",{"_index":24,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["timerintervaldefault",{"_index":133,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timestamp",{"_index":225,"title":{},"body":{"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timestamps",{"_index":309,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["tostring",{"_index":41,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["trace",{"_index":197,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["trace(methodname",{"_index":417,"title":{},"body":{"classes/Logger.html":{}}}],["triggered",{"_index":57,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["true",{"_index":776,"title":{},"body":{"index.html":{}}}],["try",{"_index":444,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["tslint:disable",{"_index":289,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["type",{"_index":52,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["typeof",{"_index":169,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["typical",{"_index":16,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["typically",{"_index":676,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":324,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["under",{"_index":271,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["unit",{"_index":88,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["url",{"_index":20,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/JsonLayout.html":{}}}],["usage",{"_index":671,"title":{},"body":{"index.html":{}}}],["use",{"_index":645,"title":{},"body":{"index.html":{}}}],["used",{"_index":86,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["usefactory",{"_index":779,"title":{},"body":{"index.html":{}}}],["useful",{"_index":598,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["using",{"_index":587,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["valid",{"_index":193,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["value",{"_index":279,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["values",{"_index":194,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["version",{"_index":640,"title":{},"body":{"index.html":{}}}],["versions",{"_index":644,"title":{},"body":{"index.html":{}}}],["via",{"_index":14,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["viewer",{"_index":670,"title":{},"body":{"index.html":{}}}],["visible",{"_index":753,"title":{},"body":{"index.html":{}}}],["void",{"_index":69,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["want",{"_index":599,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["warn",{"_index":136,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["warn(methodname",{"_index":419,"title":{},"body":{"classes/Logger.html":{}}}],["way",{"_index":767,"title":{},"body":{"index.html":{}}}],["window.location.href",{"_index":229,"title":{},"body":{"classes/JsonLayout.html":{}}}],["write",{"_index":330,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["writes",{"_index":787,"title":{},"body":{"index.html":{}}}],["writing",{"_index":381,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["written",{"_index":378,"title":{},"body":{"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["yes",{"_index":390,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AjaxAppender.html":{"url":"classes/AjaxAppender.html","title":"class - AjaxAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AjaxAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which sends the log messages to a server via HTTP.\nA typical configuration could be:\n```json\n\n{\n\"url\": \"https://my.backend.xy/LoggingBackend\",\n\"batchSize\": 10,\n\"timerInterval\": 60000,\n\"threshold\": \"INFO\"\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                appenderFailed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getBatchSize\n                            \n                            \n                                    Public\n                                getInternalAppender\n                            \n                            \n                                    Public\n                                getLayout\n                            \n                            \n                                    Public\n                                getTimerInterval\n                            \n                            \n                                    Public\n                                setBatchSize\n                            \n                            \n                                    Public\n                                setLayout\n                            \n                            \n                                    Public\n                                setTimerInterval\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: AjaxAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ajax-appender.model.ts:36\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        AjaxAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            appenderFailed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:33\n                            \n                        \n\n                \n                    \n                        Event triggered when the appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:104\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: AjaxAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:81\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe url cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                AjaxAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBatchSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBatchSize()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:128\n                \n            \n\n\n            \n                \n                    Returns the number of log messages sent in each request.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInternalAppender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalAppender()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:121\n                \n            \n\n\n            \n                \n                    Get the internally used appender.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         log4javascript.AjaxAppender\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLayout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayout()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:143\n                \n            \n\n\n            \n                \n                    Returns the appender's layout.\n\n\n                    \n                        Returns :     log4javascript.Layout\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTimerInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimerInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:157\n                \n            \n\n\n            \n                \n                    Returns the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setBatchSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setBatchSize(batchSize: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:136\n                \n            \n\n\n            \n                \n                    Sets the number of log messages to send in each request.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    batchSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new batch size\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLayout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLayout(layout: log4javascript.Layout)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:150\n                \n            \n\n\n            \n                \n                    Sets the appender's layout.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layout\n                                    \n                                            log4javascript.Layout\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setTimerInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTimerInterval(timerInterval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:165\n                \n            \n\n\n            \n                \n                    Sets the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    timerInterval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new timer interval\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:113\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventEmitter } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { JsonLayout } from \"./json-layout.model\";\nimport { LogLevelConverter } from \"./log-level.converter\";\n\n/**\n * An appender which sends the log messages to a server via HTTP.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"url\": \"https://my.backend.xy/LoggingBackend\",\n *   \"batchSize\": 10,\n *   \"timerInterval\": 60000,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class AjaxAppender extends log4javascript.Appender {\n\n\tprivate static batchSizeDefault = 1;\n\tprivate static timerIntervalDefault = 0;\n\tprivate static thresholdDefault = \"WARN\";\n\n\t/**\n\t * Event triggered when the appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic appenderFailed: EventEmitter;\n\n\tprivate ajaxAppender: log4javascript.AjaxAppender;\n\tprivate url: string;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: AjaxAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\tif (!configuration.url) {\n\t\t\tthrow new Error(\"url must be not empty\");\n\t\t}\n\t\tthis.ajaxAppender = new log4javascript.AjaxAppender(configuration.url);\n\t\tthis.url = configuration.url;\n\n\t\tthis.ajaxAppender.setLayout(new JsonLayout(false, false));\n\t\tthis.ajaxAppender.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t\tthis.ajaxAppender.setSendAllOnUnload(true);\n\n\t\tthis.appenderFailed = new EventEmitter();\n\t\tthis.ajaxAppender.setFailCallback((message: any) => {\n\t\t\tthis.appenderFailed.emit(message);\n\t\t});\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tbatchSize: configuration.batchSize || AjaxAppender.batchSizeDefault,\n\t\t\tthreshold: configuration.threshold || AjaxAppender.thresholdDefault,\n\t\t\ttimerInterval: configuration.timerInterval || AjaxAppender.timerIntervalDefault,\n\t\t\turl: configuration.url,\n\t\t});\n\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The url cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: AjaxAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.url && configuration.url !== this.url) {\n\t\t\t\tthrow new Error(\"url must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.batchSize) {\n\t\t\t\tthis.setBatchSize(configuration.batchSize);\n\t\t\t}\n\t\t\tif (typeof configuration.timerInterval === \"number\") {\n\t\t\t\tthis.setTimerInterval(configuration.timerInterval);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\tthis.ajaxAppender.append(loggingEvent);\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.AjaxAppender\";\n\t}\n\n\t/**\n\t * Get the internally used appender.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic getInternalAppender(): log4javascript.AjaxAppender {\n\t\treturn this.ajaxAppender;\n\t}\n\n\t/**\n\t * Returns the number of log messages sent in each request.\n\t */\n\tpublic getBatchSize(): number {\n\t\treturn this.ajaxAppender.getBatchSize();\n\t}\n\n\t/**\n\t * Sets the number of log messages to send in each request.\n\t * @param batchSize new batch size\n\t */\n\tpublic setBatchSize(batchSize: number): void {\n\t\tthis.ajaxAppender.setBatchSize(batchSize);\n\t}\n\n\t/**\n\t * Returns the appender's layout.\n\t */\n\tpublic getLayout(): log4javascript.Layout {\n\t\treturn this.ajaxAppender.getLayout();\n\t}\n\n\t/**\n\t * Sets the appender's layout.\n\t */\n\tpublic setLayout(layout: log4javascript.Layout): void {\n\t\tthis.ajaxAppender.setLayout(layout);\n\t}\n\n\t/**\n\t * Returns the length of time in milliseconds between each sending of queued log messages.\n\t */\n\tpublic getTimerInterval(): number {\n\t\treturn this.ajaxAppender.getTimerInterval();\n\t}\n\n\t/**\n\t * Sets the length of time in milliseconds between each sending of queued log messages.\n\t * @param timerInterval new timer interval\n\t */\n\tpublic setTimerInterval(timerInterval: number): void {\n\t\tthis.ajaxAppender.setTimed(timerInterval > 0);\n\t\tthis.ajaxAppender.setTimerInterval(timerInterval);\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AjaxAppenderConfiguration.html":{"url":"interfaces/AjaxAppenderConfiguration.html","title":"interface - AjaxAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AjaxAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for AjaxAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        batchSize\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                                \n                                            Optional\n                                        timerInterval\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        batchSize\n                                    \n                                \n                                \n                                    \n                                        batchSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Number of log messages sent in each request.\nDefault: 1.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerInterval\n                                    \n                                \n                                \n                                    \n                                        timerInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Interval for sending log messages (in milliseconds).\nIf set to 0, every message will be sent immediatedly.\nDefault: 0.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Url to send JavaScript logs\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AjaxAppenderConfiguration {\n\n\t/**\n\t * Url to send JavaScript logs\n\t */\n\turl: string;\n\n\t/**\n\t * Number of log messages sent in each request.\n\t *\n\t * Default: 1.\n\t */\n\tbatchSize?: number;\n\n\t/**\n\t * Interval for sending log messages (in milliseconds).\n\t *\n\t * If set to 0, every message will be sent immediatedly.\n\t *\n\t * Default: 0.\n\t */\n\ttimerInterval?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BrowserConsoleAppenderConfiguration.html":{"url":"interfaces/BrowserConsoleAppenderConfiguration.html","title":"interface - BrowserConsoleAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BrowserConsoleAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/browser-console-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for BrowserConsoleAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: DEBUG.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface BrowserConsoleAppenderConfiguration {\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: DEBUG.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JsonLayout.html":{"url":"classes/JsonLayout.html","title":"class - JsonLayout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JsonLayout\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/json-layout.model.ts\n        \n\n            \n                Description\n            \n            \n                Formats a logging event into JavaScript Object Notation (JSON). \nThe implemenatation is mainly the same as with log4javascript.JsonLayout, \nwith an improvement of serializing messages containing '\"'.\"\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            format\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    format(loggingEvent: LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/json-layout.model.ts:14\n                \n            \n\n\n            \n                \n                    Formats the log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/json-layout.model.ts:30\n                \n            \n\n\n            \n                \n                    Gets the layout's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        layout's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\nimport { LoggingEvent } from \"log4javascript\";\n\n/**\n * Formats a logging event into JavaScript Object Notation (JSON). \n * The implemenatation is mainly the same as with log4javascript.JsonLayout, \n * with an improvement of serializing messages containing '\\\"'.\"\n */\nexport class JsonLayout extends log4javascript.JsonLayout {\n\n\t/**\n\t * Formats the log message.\n\t */\n\tpublic format(loggingEvent: LoggingEvent): string {\n\t\tconst eventObj = {\n\t\t\tlogger: loggingEvent.logger.name,\n\t\t\ttimestamp: loggingEvent.timeStampInMilliseconds,\n\t\t\tlevel: loggingEvent.level.toString(),\n\t\t\turl: window.location.href,\n\t\t\tmessage: this.isCombinedMessages() ? loggingEvent.getCombinedMessages() : loggingEvent.messages\n\t\t};\n\t\treturn JSON.stringify(eventObj);\n\t}\n\n\t/**\n\t * Gets the layout's name.\n\t * Mainly for unit testing purposes.\n\t * @return layout's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.JsonLayout\";\n\t}\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalStorageAppender.html":{"url":"classes/LocalStorageAppender.html","title":"class - LocalStorageAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalStorageAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's local storage.\nThe messages are saved JSON-serialized.\nYou have to configure which key is used for storing the messages.\nA typical configuration could be:\n```json\n\n{\n\"localStorageKey\": \"myLogs\",\n\"maxMessages\": 500,\n\"threshold\": \"INFO\"\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                clearLog\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLocalStorageKey\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Static\n                                loadLogMessages\n                            \n                            \n                                    Static\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: LocalStorageAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/local-storage-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        LocalStorageAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:121\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clearLog\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearLog()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:198\n                \n            \n\n\n            \n                \n                    Removes all messages from local storage.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: LocalStorageAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:101\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe localStorageKey cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LocalStorageAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalStorageKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalStorageKey()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:152\n                \n            \n\n\n            \n                \n                    Get the key which is used to store the messages in the local storage.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:190\n                \n            \n\n\n            \n                \n                    Gets all messages stored in local storage.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:159\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in local storage.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadLogMessages(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:69\n                \n            \n\n\n            \n                \n                    Load log messages from local storage which are stored there under the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        local storage key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            removeLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:89\n                \n            \n\n\n            \n                \n                    Remove log messages from local storage which are stored there under the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        local storage key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:169\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in local storage.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:145\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\n\n/**\n * An appender which stores the log messages in the browser's local storage.\n *\n * The messages are saved JSON-serialized.\n * You have to configure which key is used for storing the messages.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"localStorageKey\": \"myLogs\",\n *   \"maxMessages\": 500,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class LocalStorageAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"WARN\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate localStorageKey: string;\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: LocalStorageAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tif (!configuration.localStorageKey || configuration.localStorageKey === \"\") {\n\t\t\tthrow new Error(\"localStorageKey must be not empty\");\n\t\t}\n\t\tthis.localStorageKey = configuration.localStorageKey;\n\n\t\t// read existing logMessages\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tthis.logMessages = LocalStorageAppender.loadLogMessages(this.localStorageKey);\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tlocalStorageKey: configuration.localStorageKey,\n\t\t\tmaxMessages: configuration.maxMessages || LocalStorageAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || LocalStorageAppender.thresholdDefault,\n\t\t});\n\t}\n\n\t/**\n\t * Load log messages from local storage which are stored there under the given key.\n\t * @param localStorageKey local storage key\n\t * @return stored messages\n\t */\n\tpublic static loadLogMessages(localStorageKey: string): LogMessage[] {\n\t\tlet logMessages: LogMessage[];\n\n\t\tif (!localStorageKey || localStorage.getItem(localStorageKey) === null) {\n\t\t\tlogMessages = [];\n\t\t} else {\n\t\t\tlogMessages = JSON.parse(localStorage.getItem(localStorageKey));\n\t\t\tfor (const logMessage of logMessages) {\n\t\t\t\t// timestamps are serialized as strings\n\t\t\t\tlogMessage.timeStamp = new Date(logMessage.timeStamp);\n\t\t\t}\n\t\t}\n\n\t\treturn logMessages;\n\t}\n\n\t/**\n\t * Remove log messages from local storage which are stored there under the given key.\n\t * @param localStorageKey local storage key\n\t */\n\tpublic static removeLogMessages(localStorageKey: string): void {\n\t\tlocalStorage.removeItem(localStorageKey);\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The localStorageKey cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: LocalStorageAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.localStorageKey && configuration.localStorageKey !== this.localStorageKey) {\n\t\t\t\tthrow new Error(\"localStorageKey must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger !== \"undefined\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// write values to localStorage\n\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.LocalStorageAppender\";\n\t}\n\n\t/**\n\t * Get the key which is used to store the messages in the local storage.\n\t */\n\tpublic getLocalStorageKey(): string {\n\t\treturn this.localStorageKey;\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in local storage.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in local storage.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tif (this.maxMessages !== value) {\n\t\t\tthis.maxMessages = value;\n\n\t\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\t\t// there are too much logMessages for the new value, therefore remove oldest messages\n\t\t\t\twhile (this.logMessages.length > this.maxMessages) {\n\t\t\t\t\tthis.logMessages.shift();\n\t\t\t\t}\n\n\t\t\t\t// write values to localStorage\n\t\t\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in local storage.\n\t * Mainly for unit testing purposes.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Removes all messages from local storage.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic clearLog(): void {\n\t\tthis.logMessages = [];\n\t\tlocalStorage.removeItem(this.localStorageKey);\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalStorageAppenderConfiguration.html":{"url":"interfaces/LocalStorageAppenderConfiguration.html","title":"interface - LocalStorageAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LocalStorageAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for LocalStorageAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        localStorageKey\n                                \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageKey\n                                    \n                                \n                                \n                                    \n                                        localStorageKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key which is used to store the messages in the local storage.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LocalStorageAppenderConfiguration {\n\t/**\n\t * Key which is used to store the messages in the local storage.\n\t */\n\tlocalStorageKey: string;\n\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogLevelConverter.html":{"url":"classes/LogLevelConverter.html","title":"class - LogLevelConverter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogLevelConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-level.converter.ts\n        \n\n            \n                Description\n            \n            \n                Helper class for converting log levels from and to different data type.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                levelFromLog4Javascript\n                            \n                            \n                                    Static\n                                levelFromString\n                            \n                            \n                                    Static\n                                levelToLog4Javascript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelFromLog4Javascript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromLog4Javascript(level: log4javascript.Level)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:15\n                \n            \n\n\n            \n                \n                    Converts log4javascript.Level to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            log4javascript.Level\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        log4javascript's data type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelFromString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromString(level: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:43\n                \n            \n\n\n            \n                \n                    Converts string representation to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string representation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelToLog4Javascript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelToLog4Javascript(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:71\n                \n            \n\n\n            \n                \n                    Converts internal LogLevel to log4javascript.Level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     log4javascript.Level\n\n                    \n                    \n                        level log4javascript's data type\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Helper class for converting log levels from and to different data type.\n */\nexport class LogLevelConverter {\n\n\t/**\n\t * Converts log4javascript.Level to internal LogLevel.\n\t * @param level log4javascript's data type\n\t * @return internal data type.\n\t */\n\tpublic static levelFromLog4Javascript(level: log4javascript.Level): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase log4javascript.Level.ALL:\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase log4javascript.Level.DEBUG:\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase log4javascript.Level.ERROR:\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase log4javascript.Level.FATAL:\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase log4javascript.Level.INFO:\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase log4javascript.Level.OFF:\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase log4javascript.Level.TRACE:\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase log4javascript.Level.WARN:\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts string representation to internal LogLevel.\n\t * @param level string representation\n\t * @return internal data type.\n\t */\n\tpublic static levelFromString(level: string): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase \"ALL\":\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase \"DEBUG\":\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase \"ERROR\":\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase \"FATAL\":\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase \"INFO\":\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase \"OFF\":\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase \"TRACE\":\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase \"WARN\":\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts internal LogLevel to log4javascript.Level.\n\t * @param internal data type.\n\t * @return level log4javascript's data type\n\t */\n\tpublic static levelToLog4Javascript(level: LogLevel): log4javascript.Level {\n\t\tswitch (level) {\n\t\t\tcase LogLevel.ALL:\n\t\t\t\treturn log4javascript.Level.ALL;\n\t\t\tcase LogLevel.DEBUG:\n\t\t\t\treturn log4javascript.Level.DEBUG;\n\t\t\tcase LogLevel.ERROR:\n\t\t\t\treturn log4javascript.Level.ERROR;\n\t\t\tcase LogLevel.FATAL:\n\t\t\t\treturn log4javascript.Level.FATAL;\n\t\t\tcase LogLevel.INFO:\n\t\t\t\treturn log4javascript.Level.INFO;\n\t\t\tcase LogLevel.OFF:\n\t\t\t\treturn log4javascript.Level.OFF;\n\t\t\tcase LogLevel.TRACE:\n\t\t\t\treturn log4javascript.Level.TRACE;\n\t\t\tcase LogLevel.WARN:\n\t\t\t\treturn log4javascript.Level.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogMessage.html":{"url":"interfaces/LogMessage.html","title":"interface - LogMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LogMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-message.model.ts\n        \n\n            \n                Description\n            \n            \n                Log message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        level\n                                \n                                \n                                        logger\n                                \n                                \n                                        message\n                                \n                                \n                                        methodName\n                                \n                                \n                                        timeStamp\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                    \n                                \n                                \n                                    \n                                        level:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Log level.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logger\n                                    \n                                \n                                \n                                    \n                                        logger:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the logger.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        methodName\n                                    \n                                \n                                \n                                    \n                                        methodName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Method, in which the message was written.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                    \n                                \n                                \n                                    \n                                        timeStamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Time when the log was written.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LogMessage {\n\t/**\n\t * Time when the log was written.\n\t */\n\ttimeStamp: Date;\n\n\t/**\n\t * Log level.\n\t */\n\tlevel: string;\n\n\t/**\n\t * Name of the logger.\n\t */\n\tlogger: string;\n\n\t/**\n\t * Method, in which the message was written.\n\t */\n\tmethodName: string;\n\n\t/**\n\t * Message.\n\t */\n\tmessage: string[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logger.model.ts\n        \n\n            \n                Description\n            \n            \n                Logger for writing log messages.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                debug\n                            \n                            \n                                    Public\n                                entry\n                            \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                exit\n                            \n                            \n                                    Public\n                                fatal\n                            \n                            \n                                    Public\n                                formatArgument\n                            \n                            \n                                    Public\n                                getInternalLogger\n                            \n                            \n                                    Public\n                                getLogLevel\n                            \n                            \n                                    Public\n                                info\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                trace\n                            \n                            \n                                    Public\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger?: string | any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/logger.model.ts:11\n                            \n                        \n\n                \n                    \n                            Creates a new instance of a logger.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            debug\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:64\n                \n            \n\n\n            \n                \n                    Logs a message at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            entry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    entry(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:145\n                \n            \n\n\n            \n                \n                    Logs the entry into a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            error\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    error(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:112\n                \n            \n\n\n            \n                \n                    Logs a message at level ERROR.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exit(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:164\n                \n            \n\n\n            \n                \n                    Logs the exit of a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fatal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fatal(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:128\n                \n            \n\n\n            \n                \n                    Logs a message at level FATAL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            formatArgument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formatArgument(arg: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:179\n                \n            \n\n\n            \n                \n                    Formats the given argument.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arg\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInternalLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:199\n                \n            \n\n\n            \n                \n                    Returns the internal Logger (for unit tests only).\n\n\n                    \n                        Returns :         log4javascript.Logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogLevel()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:29\n                \n            \n\n\n            \n                \n                    Get the log level.\n\n\n                    \n                        Returns :         LogLevel\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            info\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    info(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:80\n                \n            \n\n\n            \n                \n                    Logs a message at level INFO.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:38\n                \n            \n\n\n            \n                \n                    Set the log level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new log level\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trace\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trace(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:48\n                \n            \n\n\n            \n                \n                    Logs a message at level TRACE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:96\n                \n            \n\n\n            \n                \n                    Logs a message at level WARN.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Logger for writing log messages.\n */\nexport class Logger {\n\n\tprivate logger: log4javascript.Logger;\n\n\t/**\n\t * Creates a new instance of a logger.\n\t */\n\tconstructor(logger?: string | any) {\n\t\tif (typeof logger === \"undefined\") {\n\t\t\tthis.logger = log4javascript.getRootLogger();\n\t\t} else if (typeof logger === \"string\") {\n\t\t\tthis.logger = log4javascript.getLogger(logger);\n\t\t} else {\n\t\t\tthis.logger = logger;\n\t\t}\n\t}\n\n\t/**\n\t * Get the log level.\n\t */\n\tpublic getLogLevel(): LogLevel {\n\t\treturn LogLevelConverter.levelFromLog4Javascript(this.logger.getLevel());\n\t}\n\n\t/**\n\t * Set the log level.\n\t *\n\t * @param level the new log level\n\t */\n\tpublic setLogLevel(level: LogLevel): void {\n\t\tthis.logger.setLevel(LogLevelConverter.levelToLog4Javascript(level));\n\t}\n\n\t/**\n\t * Logs a message at level TRACE.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic trace(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.trace.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic debug(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.debug.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level INFO.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic info(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level WARN.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic warn(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isWarnEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.warn.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level ERROR.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic error(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isErrorEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.error.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level FATAL.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic fatal(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isFatalEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.fatal.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the entry into a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic entry(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"entry\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the exit of a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic exit(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"exit\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Formats the given argument.\n\t */\n\tpublic formatArgument(arg: any): string {\n\t\tif (typeof arg === \"string\") {\n\t\t\treturn arg;\n\t\t} else if (typeof arg === \"number\") {\n\t\t\treturn arg.toString();\n\t\t} else if (arg instanceof Error) {\n\t\t\t// JSON.stringify() returns here \"{ }\"\n\t\t\treturn arg.toString();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(arg);\n\t\t\t} catch (e) {\n\t\t\t\treturn e.message;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the internal Logger (for unit tests only).\n\t */\n\tpublic getInternalLogger(): log4javascript.Logger {\n\t\treturn this.logger;\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for logging functionality.\nBy default, the following settings are used:\n\nlogger: root with level WARN\nappender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n\nVia configure, it is possible to amend these settings.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ajaxAppenderFailed\n                            \n                            \n                                    Public\n                                logMessagesChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogger\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getLogMessagesFromLocalStorage\n                            \n                            \n                                    Public\n                                getRootLogger\n                            \n                            \n                                    Public\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                removeLogMessagesFromLocalStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/logging.service.ts:44\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the service.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration?: LoggingServiceConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:83\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LoggingServiceConfiguration\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogger(loggerName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:158\n                \n            \n\n\n            \n                \n                    Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggerName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the logger\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:170\n                \n            \n\n\n            \n                \n                    Gets the last log messages.\nThe log messages are retrieved from the internal MemoryAppender.\nThat means you will get only the most current messages. The number of the messages is limited\nby its maxMessages value.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessagesFromLocalStorage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessagesFromLocalStorage(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:179\n                \n            \n\n\n            \n                \n                    Loads the log messages written by the LocalStorageAppender with the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key for the local storage\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRootLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRootLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:149\n                \n            \n\n\n            \n                \n                    Gets the root logger from which all other loggers derive.\n\n\n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        root logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:186\n                \n            \n\n\n            \n                \n                    Remove all log messages.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLogMessagesFromLocalStorage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessagesFromLocalStorage(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:195\n                \n            \n\n\n            \n                \n                    Removes the log messages written by the LocalStorageAppender with the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key for the local storage\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ajaxAppenderFailed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:40\n                            \n                        \n\n                \n                    \n                        Event triggered when ajax appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            logMessagesChanged\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:34\n                            \n                        \n\n                \n                    \n                        Event triggered when the log messages got (potentially) change.\nThis can happen when:\n\nnew message was added\nall message where removed from memory\nall massages where removed for one spcific LocalStorageAppender\n\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable, Optional } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppender } from \"./ajax-appender.model\";\nimport { LocalStorageAppender } from \"./local-storage-appender.model\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogMessage } from \"./log-message.model\";\nimport { Logger } from \"./logger.model\";\nimport { LoggingServiceConfiguration } from \"./logging-service.configuration\";\nimport { MemoryAppender } from \"./memory-appender.model\";\n\n/**\n * Service for logging functionality.\n *\n * By default, the following settings are used:\n *  - logger: root with level WARN\n *  - appender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n *\n * Via [configure](#configure), it is possible to amend these settings.\n */\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class LoggingService {\n\n\t/**\n\t * Event triggered when the log messages got (potentially) change.\n\t * This can happen when:\n\t * - new message was added\n\t * - all message where removed from memory\n\t * - all massages where removed for one spcific LocalStorageAppender\n\t */\n\tpublic logMessagesChanged: EventEmitter;\n\n\t/**\n\t * Event triggered when ajax appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic ajaxAppenderFailed: EventEmitter;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate memoryAppender: MemoryAppender;\n\tprivate browserConsoleAppender: log4javascript.BrowserConsoleAppender;\n\n\t/**\n\t * Creates a new instance of the service.\n\t */\n\tconstructor() {\n\n\t\t// prevent log4javascript to show alerts on case of errors\n\t\tlog4javascript.logLog.setQuietMode(true);\n\n\t\t// create event emitter\n\t\tthis.logMessagesChanged = new EventEmitter();\n\t\tthis.ajaxAppenderFailed = new EventEmitter();\n\n\t\t// configure appender\n\t\tconst logger = log4javascript.getRootLogger();\n\t\tlogger.setLevel(log4javascript.Level.WARN);\n\n\t\t// browser console appender for debugger\n\t\tthis.browserConsoleAppender = new log4javascript.BrowserConsoleAppender();\n\t\tthis.browserConsoleAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.browserConsoleAppender.setThreshold(log4javascript.Level.ALL);\n\t\tlogger.addAppender(this.browserConsoleAppender);\n\n\t\t// in-memory appender for display on log messages page\n\t\tthis.memoryAppender = new MemoryAppender();\n\t\tthis.memoryAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.memoryAppender.setOnLogMessagesChangedCallback((message) => {\n\t\t\tthis.logMessagesChanged.emit();\n\t\t});\n\t\tlogger.addAppender(this.memoryAppender);\n\n\t\tthis.configure();\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration?: LoggingServiceConfiguration): void {\n\n\t\tif (typeof configuration === \"undefined\") {\n\t\t\tconfiguration = {};\n\t\t}\n\n\t\t// set log levels\n\t\tif (typeof configuration.logLevels !== \"undefined\") {\n\t\t\tfor (const level of configuration.logLevels) {\n\t\t\t\tlet logger: log4javascript.Logger;\n\t\t\t\tif (level.loggerName === \"root\") {\n\t\t\t\t\tlogger = log4javascript.getRootLogger();\n\t\t\t\t} else {\n\t\t\t\t\tlogger = log4javascript.getLogger(level.loggerName);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tlogger.setLevel(LogLevelConverter.levelToLog4Javascript(LogLevelConverter.levelFromString(level.logLevel)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(`invalid log level ${level.logLevel}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// configure AjaxAppender\n\t\tif (typeof configuration.ajaxAppender !== \"undefined\") {\n\t\t\tconst ajaxAppender = new AjaxAppender(configuration.ajaxAppender);\n\t\t\tajaxAppender.appenderFailed.subscribe((message: string) => {\n\t\t\t\tthis.ajaxAppenderFailed.emit(message);\n\t\t\t});\n\t\t\tlog4javascript.getRootLogger().addAppender(ajaxAppender);\n\t\t}\n\n\t\t// configure LocalStorageAppender\n\t\tif (typeof configuration.localStorageAppender !== \"undefined\") {\n\t\t\tconst localStorageAppender = new LocalStorageAppender(configuration.localStorageAppender);\n\t\t\tlog4javascript.getRootLogger().addAppender(localStorageAppender);\n\n\t\t\t// ensure that an eventual memoryAppender is behind the localStorageAppender\n\t\t\tconst appenders = new Logger().getInternalLogger().getEffectiveAppenders();\n\t\t\tconst memoryAppender = appenders.find((a) => a.toString() === \"Ionic.Logging.MemoryAppender\") as MemoryAppender;\n\t\t\tif (memoryAppender) {\n\t\t\t\tlog4javascript.getRootLogger().removeAppender(memoryAppender);\n\t\t\t\tlog4javascript.getRootLogger().addAppender(memoryAppender);\n\t\t\t}\n\t\t}\n\n\t\t// configure MemoryAppender\n\t\tif (configuration.memoryAppender) {\n\t\t\tthis.memoryAppender.configure(configuration.memoryAppender);\n\t\t}\n\n\t\t// configure BrowserConsoleAppender\n\t\tif (configuration.browserConsoleAppender) {\n\t\t\tif (configuration.browserConsoleAppender.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.browserConsoleAppender.threshold));\n\t\t\t\tthis.browserConsoleAppender.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Gets the root logger from which all other loggers derive.\n\t * @return root logger\n\t */\n\tpublic getRootLogger(): Logger {\n\t\treturn new Logger();\n\t}\n\n\t/**\n\t * Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\t * @param loggerName name of the logger\n\t * @return logger\n\t */\n\tpublic getLogger(loggerName: string): Logger {\n\t\treturn new Logger(loggerName);\n\t}\n\n\t/**\n\t * Gets the last log messages.\n\t *\n\t * The log messages are retrieved from the internal [MemoryAppender](../memoryappender.html).\n\t * That means you will get only the most current messages. The number of the messages is limited\n\t * by its maxMessages value.\n\t * @return log messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.memoryAppender.getLogMessages();\n\t}\n\n\t/**\n\t * Loads the log messages written by the LocalStorageAppender with the given key.\n\t * @param localStorageKey key for the local storage\n\t * @returns log messages\n\t */\n\tpublic getLogMessagesFromLocalStorage(localStorageKey: string): LogMessage[] {\n\t\treturn LocalStorageAppender.loadLogMessages(localStorageKey);\n\t}\n\n\t/**\n\t * Remove all log messages.\n\t */\n\tpublic removeLogMessages(): void {\n\t\tthis.memoryAppender.removeLogMessages();\n\t\tthis.logMessagesChanged.emit();\n\t}\n\n\t/**\n\t * Removes the log messages written by the LocalStorageAppender with the given key.\n\t * @param localStorageKey key for the local storage\n\t */\n\tpublic removeLogMessagesFromLocalStorage(localStorageKey: string): void {\n\t\tLocalStorageAppender.removeLogMessages(localStorageKey);\n\t\tthis.logMessagesChanged.emit();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggingServiceConfiguration.html":{"url":"interfaces/LoggingServiceConfiguration.html","title":"interface - LoggingServiceConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggingServiceConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging-service.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Partial configuration definition for LoggingService.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ajaxAppender\n                                \n                                \n                                            Optional\n                                        browserConsoleAppender\n                                \n                                \n                                            Optional\n                                        localStorageAppender\n                                \n                                \n                                            Optional\n                                        logLevels\n                                \n                                \n                                            Optional\n                                        memoryAppender\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ajaxAppender\n                                    \n                                \n                                \n                                    \n                                        ajaxAppender:         AjaxAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AjaxAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for AjaxAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        browserConsoleAppender\n                                    \n                                \n                                \n                                    \n                                        browserConsoleAppender:         BrowserConsoleAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BrowserConsoleAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for BrowserConsoleAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageAppender\n                                    \n                                \n                                \n                                    \n                                        localStorageAppender:         LocalStorageAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LocalStorageAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for LocalStorageAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevels\n                                    \n                                \n                                \n                                    \n                                        logLevels:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Log levels for different loggers.\nDefault: root: WARN\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        memoryAppender\n                                    \n                                \n                                \n                                    \n                                        memoryAppender:         MemoryAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MemoryAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for MemoryAppender.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { BrowserConsoleAppenderConfiguration } from \"./browser-console-appender.configuration\";\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * Partial configuration definition for LoggingService.\n */\nexport interface LoggingServiceConfiguration {\n\n\t/**\n\t * Log levels for different loggers.\n\t * Default: root: WARN\n\t */\n\tlogLevels?: Array;\n\n\t/**\n\t * Settings for AjaxAppender.\n\t */\n\tajaxAppender?: AjaxAppenderConfiguration;\n\n\t/**\n\t * Settings for LocalStorageAppender.\n\t */\n\tlocalStorageAppender?: LocalStorageAppenderConfiguration;\n\n\t/**\n\t * Settings for MemoryAppender.\n\t */\n\tmemoryAppender?: MemoryAppenderConfiguration;\n\n\t/**\n\t * Settings for BrowserConsoleAppender.\n\t */\n\tbrowserConsoleAppender?: BrowserConsoleAppenderConfiguration;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggingServiceModule.html":{"url":"modules/LoggingServiceModule.html","title":"module - LoggingServiceModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggingServiceModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/logging-service.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\n\n@NgModule({\n\timports: [\n\t],\n\tdeclarations: [\n\t],\n\texports: [\n\t]\n})\nexport class LoggingServiceModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemoryAppender.html":{"url":"classes/MemoryAppender.html","title":"class - MemoryAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemoryAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's memory.\nThe MemoryAppender is enabled by default.\nIf you do not specify anything else, it is using this configuration:\n```JSON\n\n{\n\"memoryAppender\": [\n{\n\"maxMessages\": 250,\n\"threshold\": \"ALL\"\n}\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Public\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                setOnLogMessagesChangedCallback\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration?: MemoryAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/memory-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        MemoryAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:78\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: MemoryAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:61\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                MemoryAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:134\n                \n            \n\n\n            \n                \n                    Gets all messages stored in memory.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:111\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in memory.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:141\n                \n            \n\n\n            \n                \n                    Remove all messages stored in memory.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:121\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in memory.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOnLogMessagesChangedCallback\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:150\n                \n            \n\n\n            \n                \n                    Registers a callback which will be called every time a new message is appended.\nThis could be useful if you want to show new messages in realtime.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        callback to be called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:104\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * An appender which stores the log messages in the browser's memory.\n *\n * The MemoryAppender is enabled by default.\n * If you do not specify anything else, it is using this configuration:\n *\n * ```JSON\n * {\n *   \"memoryAppender\": [\n *     {\n *       \"maxMessages\": 250,\n *       \"threshold\": \"ALL\"\n *     }\n * }\n * ```\n */\nexport class MemoryAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"ALL\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\t// tslint:disable-next-line:completed-docs\n\tprivate onLogMessagesChangedCallback: (message: LogMessage) => void;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration?: MemoryAppenderConfiguration) {\n\t\tsuper();\n\n\t\tthis.logMessages = [];\n\n\t\t// process configuration\n\t\tconfiguration = configuration || {};\n\t\tthis.configure({\n\t\t\tmaxMessages: configuration.maxMessages || MemoryAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || MemoryAppender.thresholdDefault,\n\t\t});\n\n\t\tthis.maxMessages = MemoryAppender.maxMessagesDefault;\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * Only the defined properties get overwritten.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: MemoryAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger === \"object\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// inform about new message\n\t\tif (typeof this.onLogMessagesChangedCallback === \"function\") {\n\t\t\tthis.onLogMessagesChangedCallback(message);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.MemoryAppender\";\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in memory.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in memory.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tthis.maxMessages = value;\n\n\t\t// if there are too much logMessages for the new value, remove oldest messages\n\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\tthis.logMessages.splice(0, this.logMessages.length - this.maxMessages);\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in memory.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Remove all messages stored in memory.\n\t */\n\tpublic removeLogMessages(): void {\n\t\tthis.logMessages.splice(0);\n\t}\n\n\t/**\n\t * Registers a callback which will be called every time a new message is appended.\n\t * This could be useful if you want to show new messages in realtime.\n\t * @param callback callback to be called\n\t */\n\tpublic setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void): void {\n\t\tthis.onLogMessagesChangedCallback = callback;\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemoryAppenderConfiguration.html":{"url":"interfaces/MemoryAppenderConfiguration.html","title":"interface - MemoryAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MemoryAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for MemoryAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\nDefault: ALL.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface MemoryAppenderConfiguration {\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\n\t *\n\t * Default: ALL.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/ajax-appender.configuration.ts\n            \n            interface\n            AjaxAppenderConfiguration\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/ajax-appender.model.ts\n            \n            class\n            AjaxAppender\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/lib/browser-console-appender.configuration.ts\n            \n            interface\n            BrowserConsoleAppenderConfiguration\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/json-layout.model.ts\n            \n            class\n            JsonLayout\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.configuration.ts\n            \n            interface\n            LocalStorageAppenderConfiguration\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.model.ts\n            \n            class\n            LocalStorageAppender\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/lib/log-level.converter.ts\n            \n            class\n            LogLevelConverter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/log-message.model.ts\n            \n            interface\n            LogMessage\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logger.model.ts\n            \n            class\n            Logger\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/lib/logging-service.configuration.ts\n            \n            interface\n            LoggingServiceConfiguration\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.configuration.ts\n            \n            interface\n            MemoryAppenderConfiguration\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.model.ts\n            \n            class\n            MemoryAppender\n            \n                100 %\n                (10/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            log4javascript : ^1.4.15\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^9.0.0\n        \n            @angular/core : ^9.0.0\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LogLevel   (src/.../log-level.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/log-level.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            Logging levels.\n\n                        \n                    \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                 FATAL\n                            \n                        \n                        \n                            \n                                 OFF\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nionic-logging-service\nThe dependencies used by the latest version are the same as needed for Ionic 5.0.0. For older versions use:\n\n\n\nionic-logging-service\nIonic\nAngular\n\n\n\n\n9.0.0\n>= 5.0.0\n^9.0.0\n\n\n8.0.0\n>= 4.7.0\n^8.0.0\n\n\n7.0.0\n>= 4.0.0-rc\n^7.0.0\n\n\n6.0.0\n>= 4.0.0-beta\n^6.0.0\n\n\n5.1.0\n>= 3.9.0\n^5.0.0\n\n\n3.1.0\n>= 3.0.0\n^4.0.0\n\n\n2.0.0\n>= 2.2.0\n^2.4.8\n\n\n1.2.1\n>= 2.0.0\n^2.2.1\n\n\n\nThis service encapsulates log4javascript's functionalities for apps built with Ionic framework.\nFor a sample, just have a look at ionic-logging-viewer.\nUsage\nFirst, you need to import the LoggingServiceModule in your AppModule. The next step is typically the configuration (see below). And then, finally, you can use the LoggingService in your code, e.g.:\nimport { Logger, LoggingService } from \"ionic-logging-service\";\n\nexport class MyComponent {\n\n  private logger: Logger;\n\n  constructor(\n    loggingService: LoggingService) {\n\n    this.logger = loggingService.getLogger(\"MyApp.MyComponent\");\n    const methodName = \"ctor\";\n    this.logger.entry(methodName);\n\n    ...\n\n    this.logger.exit(methodName);\n  }\n\n  public myMethod(index: number, message: string): number[] {\n    const methodName = \"myMethod\";\n    this.logger.entry(methodName, index, number);\n\n    try {\n      ...\n    } catch (e) {\n      this.logger.error(methodName, \"some error\", e);\n    }\n\n    this.logger.exit(methodName);\n    return result;\n  }\n}Depending how the code is called, this could produce the following output in the browser's console:\nI  18:49:43.794  MyApp.MyComponent  ctor  entry\nI  18:49:43.797  MyApp.MyComponent  ctor  exit\nI  18:49:43.801  MyApp.MyComponent  myMethod  entry  42  Hello\nE  18:49:43.814  MyApp.MyComponent  myMethod  some error\nI  18:49:43.801  MyApp.MyComponent  myMethod  exit  [2, 5, 99]Logger\nA logger is the component responsible for logging. Typically, you have one logger per every class. The logger name describe the place where in your app the class is placed. The single parts are separated by dots ('.'). This is quite the same as with namespaces in dotnet or packages in Java.\nThis builds some kind of hierarchy. E.g., if you have a logger named A.B.C.D, you get automatically also loggers for A.B.C, A.B and A. Additionally, there is the so-called root logger, which is the parent of all other loggers.\nThe hierarchy is important, since the loggers inherit the log level from there parent - if there is no other level defined. That means, you can define just one log level for the complete app (by setting the root logger's level), and you can par example define, you do not want to see logs written for logger A.B.C (this includes also A.B.C.D).\nLevel\nEvery log message has a level. This is the severity of the message. Available levels are TRACE, DEBUG, INFO, WARN, ERROR and FATAL - these correspond to the logging methods trace, debug, info, warn, error and fatal of Logger. Levels are ordered as follows: TRACE DEBUG INFO WARN ERROR FATAL. This means the FATAL is the most severe and TRACE the least. Also included are levels called ALL and OFF intended to enable or disable all logging respectively.\nSetting a level to a logger disables log messages of severity lower than that level. For instance, if a level of INFO is set on a logger then only log messages of severity INFO or greater will be logged, meaning DEBUG and TRACE messages will not be logged.\nAppender\nAppenders make the logs visible, e.g. by writing them to the browser's console. This is quite useful during development, either in console or using ionic serve --consolelogs. But later, you will need other logs:\n\nAjaxAppender: sends the log messages to a backend server\nMemoryAppender: keeps the log messages in memory\nLocalStorageAppender: stores the log messages in local storage\n\nIf you want to see a complete example, have a look at ionic-feedback-sample.\nConfiguration\nBy default, the following configuration is used:\n\nLogger:\n\nroot: Level.WARN\n\n\nAppender:\n\nBrowserConsoleAppender\nMemoryAppender\n\n\n\nTo change it, just call configure(). This method takes an object of type LoggingConfiguration.\nThe recommended way is to place the configuration in environment.ts:\nexport const environment = {\n  logging: {\n    ...\n  }\n};Call configure() in your app.module.ts:\nexport function configureLogging(loggingService: LoggingService): () => void {\n  return () => loggingService.configure(environment.logging);\n}\n\n@NgModule({\n  ...\n  imports: [\n    ...\n    LoggingServiceModule\n  ],\n  providers: [\n    {\n      deps: [LoggingService],\n      multi: true,\n      provide: APP_INITIALIZER,\n      useFactory: configureLogging\n    }\n  ]\n})\nexport class AppModule { }logLevels\nlogLevels gets an array of log level definitions for different loggers, e.g.\n{\n  \"logLevels\": [\n    {\n      \"loggerName\": \"root\",\n      \"logLevel\": \"DEBUG\"\n    },\n    {\n      \"loggerName\": \"MyApp.MyNamespace.MyLogger\",\n      \"logLevel\": \"INFO\"\n    }\n  ]\n};That means, instead of the default log level WARN, you want to log all messages with level DEBUG and higher. Only for MyApp.MyNamespace.MyLogger, you want to restrict the level to INFO.\najaxAppender\nWith ajaxAppender, you add an additional appender of type AjaxAppender, which sends the log messages to a backend server.\nbrowserConsoleAppender\nWith browserConsoleAppender, it is possible to configure the BrowserConsoleAppender, which writes the log to the browser's console.\nlocalStorageAppender\nWith localStorageAppender, you add an additional appender of type LocalStorageAppender, which stores log messages in the local storage.\nmemoryAppender\nWith memoryAppender, it is possible to configure the MemoryAppender, which keeps log messages in the memory.\nAPI\nsee API documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        LoggingServiceModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
