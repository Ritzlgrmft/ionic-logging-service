var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AjaxAppender.html",[0,0.298,1,1.116]],["body/classes/AjaxAppender.html",[0,0.172,1,1.252,2,0.644,3,0.335,4,0.25,5,0.21,6,3.354,7,0.95,8,0.664,9,1.936,10,2.047,11,0.912,12,1.331,13,2.424,14,2.047,15,2.528,16,2.047,17,1.381,18,0.05,19,2.797,20,2.528,21,3.117,22,2.528,23,3.117,24,2.528,25,1.106,26,0.172,27,0.745,28,1.935,29,3.124,30,0.895,31,2.424,32,1.305,33,3.541,34,3.541,35,3.541,36,3.541,37,2.528,38,2.528,39,2.528,40,2.092,41,0.73,42,1.73,43,2.207,44,1.757,45,1.608,46,1.305,47,1.936,48,1.148,49,1.713,50,1.486,51,0.577,52,0.86,53,2.867,54,1.608,55,1.828,56,2.047,57,2.424,58,1.278,59,0.696,60,1.73,61,2.138,62,1.608,63,1.73,64,1.148,65,1.494,66,1.73,67,2.028,68,2.116,69,1.494,70,1.608,71,1.494,72,0.895,73,1.305,74,1.305,75,1.73,76,2.867,77,2.047,78,1.305,79,1.608,80,1.568,81,2.047,82,3.586,83,2.867,84,1.608,85,2.528,86,1.305,87,2.092,88,1.828,89,2.092,90,2.092,91,3.124,92,1.302,93,3.031,94,3.849,95,3.849,96,1.608,97,3.541,98,2.424,99,2.867,100,3.541,101,2.867,102,3.541,103,2.528,104,1.608,105,4.087,106,2.528,107,2.528,108,2.528,109,1.608,110,2.528,111,1.608,112,2.528,113,2.047,114,1.302,115,1.148,116,0.568,117,1.06,118,0.95,119,0.791,120,1.101,121,0.95,122,0.95,123,1.305,124,1.608,125,0.569,126,0.83,127,0.21,128,0.95,129,1.101,130,1.855,131,1.846,132,1.608,133,1.101,134,1.608,135,2.047,136,1.101,137,0.339,138,1.855,139,1.302,140,1.101,141,2.092,142,1.302,143,2.047,144,3.849,145,2.528,146,2.528,147,1.608,148,3.849,149,2.528,150,2.528,151,1.608,152,1.608,153,1.302,154,1.608,155,1.608,156,1.608,157,1.608,158,1.608,159,1.608,160,1.608,161,1.608,162,1.101,163,1.302,164,0.95,165,2.528,166,1.608,167,1.73,168,1.608,169,2.528,170,1.608,171,2.047,172,1.608,173,1.608,174,0.83,175,1.608,176,0.644,177,0.95,178,0.95,179,1.101,180,1.101,181,1.608,182,1.447,183,1.608,184,1.608,185,1.608,186,1.608,187,1.608,188,1.608,189,1.608,190,1.608,191,0.022,192,0.022]],["title/interfaces/AjaxAppenderConfiguration.html",[43,1.437,193,0.506]],["body/interfaces/AjaxAppenderConfiguration.html",[1,1.254,3,0.488,4,0.486,5,0.408,6,2.143,8,0.486,11,0.879,12,1.332,17,0.862,18,0.049,19,3.523,21,3.916,23,3.916,25,1.823,26,0.335,27,0.861,43,2.113,51,0.654,52,1.12,57,2.801,58,1.28,59,1.127,76,3.916,80,1.663,81,4.168,82,3.916,83,3.916,99,3.314,101,3.314,113,3.314,116,0.936,127,0.408,133,2.801,135,3.916,137,1.018,139,3.692,153,3.314,191,0.035,192,0.035,193,0.569,194,1.254,195,1.616,196,1.663,197,2.418,198,2.113,199,1.28,200,1.449,201,1.449,202,1.858,203,4.093,204,3.314,205,2.801,206,4.093,207,4.093,208,4.093]],["title/interfaces/BrowserConsoleAppenderConfiguration.html",[193,0.506,209,1.646]],["body/interfaces/BrowserConsoleAppenderConfiguration.html",[3,0.542,4,0.611,5,0.513,8,0.611,17,1.084,18,0.049,25,1.931,26,0.422,27,0.995,51,0.513,52,0.995,59,1.301,116,0.921,127,0.513,137,0.995,191,0.04,192,0.04,193,0.716,194,1.577,195,2.032,196,1.477,197,2.792,198,2.439,199,1.642,200,1.673,201,1.673,209,2.792,210,3.188,211,2.032,212,2.326]],["title/classes/JsonLayout.html",[0,0.298,122,1.646]],["body/classes/JsonLayout.html",[0,0.348,2,1.301,3,0.348,4,0.504,5,0.423,8,0.504,11,0.762,12,1.154,18,0.049,19,2.223,26,0.348,28,1.841,30,1.484,40,2.898,44,1.484,49,1.301,50,1.587,51,0.423,52,0.684,55,2.164,58,1.451,65,3,67,1.679,72,1.484,87,2.898,88,2.164,89,2.477,90,2.477,115,1.903,116,0.892,117,1.154,119,1.451,122,2.477,123,2.164,127,0.423,128,1.919,176,1.301,182,1.643,191,0.036,192,0.036,204,3.394,213,3.758,214,2.63,215,3.971,216,2.869,217,4.191,218,4.191,219,3.394,220,4.641,221,4.191,222,4.191,223,4.191,224,4.191,225,4.191,226,3.247,227,3.247,228,4.904,229,3.247,230,1.015,231,2.223,232,1.919,233,3.247,234,1.15,235,3.247,236,3.247,237,3.247,238,3.247,239,3.247,240,3.247,241,3.247]],["title/classes/LocalStorageAppender.html",[0,0.298,242,1.116]],["body/classes/LocalStorageAppender.html",[0,0.157,2,0.588,3,0.315,4,0.228,5,0.191,7,0.868,8,0.641,9,1.818,11,0.843,12,1.474,16,1.905,17,1.354,18,0.05,25,1.042,26,0.157,27,0.495,28,1.874,30,0.833,31,2.303,32,1.737,40,1.988,41,0.667,42,1.61,44,1.697,46,1.214,47,1.857,48,1.068,49,1.574,50,1.419,51,0.512,52,0.827,55,1.519,58,1.052,60,1.61,61,2.014,63,1.61,64,1.068,65,1.39,66,1.61,67,1.818,68,2.06,69,1.39,71,1.39,72,0.833,73,1.214,74,2.028,75,1.61,77,1.905,78,1.214,80,1.476,86,1.737,87,2.322,88,2.028,89,2.322,90,2.322,93,2.303,115,1.528,116,0.843,117,1.014,119,0.736,121,0.868,123,1.519,125,0.52,126,0.758,127,0.191,128,0.868,129,1.005,130,1.672,131,2.534,136,1.005,137,0.309,138,1.784,140,1.005,141,1.739,142,1.189,143,1.905,162,1.005,163,1.189,164,0.868,167,1.61,171,1.189,174,0.758,176,1.179,177,0.868,178,0.868,179,1.005,180,1.005,182,1.518,191,0.02,192,0.02,198,1.214,202,1.068,230,0.459,231,1.005,232,0.868,234,0.52,242,0.943,243,3.23,244,2.457,245,2.303,246,1.61,247,2.666,248,2.352,249,2.943,250,3.23,251,2.352,252,3.172,253,2.352,254,1.737,255,2.352,256,3.365,257,3.365,258,2.303,259,2.725,260,2.352,261,1.61,262,1.905,263,2.13,264,1.189,265,1.468,266,1.468,267,1.905,268,1.468,269,1.468,270,1.905,271,1.468,272,2.871,273,2.008,274,1.468,275,2.322,276,2.352,277,1.468,278,2.352,279,3.365,280,2.352,281,1.468,282,2.303,283,1.905,284,1.468,285,1.905,286,1.905,287,2.824,288,1.905,289,2.725,290,1.61,291,1.468,292,0.667,293,0.868,294,1.005,295,1.189,296,0.868,297,3.674,298,3.929,299,2.352,300,2.943,301,1.468,302,1.468,303,2.383,304,1.468,305,1.905,306,1.468,307,1.468,308,1.468,309,1.468,310,1.468,311,1.468,312,1.468,313,1.468,314,1.468,315,1.468,316,1.189,317,1.005,318,1.189,319,1.189,320,2.383,321,3.181,322,1.905,323,1.005,324,1.189,325,1.189,326,1.39,327,1.189,328,0.758,329,1.189,330,1.189,331,1.189,332,2.352,333,2.352,334,2.352,335,2.352,336,1.468,337,1.189,338,1.468,339,1.468]],["title/interfaces/LocalStorageAppenderConfiguration.html",[193,0.506,263,1.437]],["body/interfaces/LocalStorageAppenderConfiguration.html",[3,0.517,4,0.548,5,0.46,8,0.548,9,1.771,11,0.804,12,1.393,17,0.972,18,0.049,25,1.881,26,0.378,27,0.93,51,0.629,52,1.064,59,1.217,80,1.628,86,2.281,116,0.966,127,0.46,137,1.064,191,0.038,192,0.038,193,0.642,194,1.414,195,1.822,196,1.581,197,2.611,198,2.281,199,1.382,200,1.565,201,1.565,242,1.414,243,2.416,244,2.19,247,2.281,250,3.025,252,3.461,254,2.61,263,2.281,270,3.578,272,2.611,275,2.611,296,2.611]],["title/classes/LogLevelConverter.html",[0,0.298,125,0.986]],["body/classes/LogLevelConverter.html",[0,0.436,2,1.007,3,0.378,4,0.39,5,0.328,8,0.632,11,0.741,18,0.049,26,0.269,28,1.443,30,1.249,44,1.443,47,1.632,49,1.632,50,1.274,51,0.703,52,0.858,59,0.692,67,1.632,78,2.716,116,0.901,117,0.971,119,1.103,125,1.249,127,0.328,131,3.036,137,0.529,138,1.849,141,2.407,182,1.992,191,0.03,192,0.03,196,1.274,199,0.786,200,0.89,201,0.89,234,1.929,292,2.446,293,1.485,340,2.61,341,2.035,342,3.526,343,3.526,344,1.82,345,2.414,346,3.526,347,3.526,348,3.526,349,3.526,350,5.137,351,2.513,352,4.822,353,3.602,354,3.576,355,3.526,356,2.513,357,4.417,358,3.526,359,2.513,360,4.074,361,4.529,362,3.526,363,4.074,364,3.526,365,4.074,366,3.526,367,4.074,368,3.526,369,4.074,370,3.526,371,4.074,372,3.526,373,4.074,374,3.526,375,4.074,376,3.526,377,4.074,378,3.299]],["title/interfaces/LogMessage.html",[193,0.506,273,1.264]],["body/interfaces/LogMessage.html",[3,0.389,4,0.563,5,0.473,8,0.563,11,0.955,18,0.049,26,0.389,27,0.947,50,1.406,51,0.685,58,1.727,64,2.042,98,3.078,116,1.021,127,0.473,191,0.038,192,0.038,193,0.66,194,1.455,230,1.672,232,3.018,234,1.894,273,2.042,328,2.636,340,2.145,379,2.939,380,3.496,381,4.886]],["title/classes/Logger.html",[0,0.298,230,0.871]],["body/classes/Logger.html",[0,0.152,2,0.567,3,0.468,4,0.22,5,0.185,8,0.696,11,0.815,12,0.629,18,0.05,26,0.152,28,1.923,30,0.809,41,0.642,44,1.681,46,1.179,47,1.32,48,1.037,49,2.148,50,1.676,51,0.598,52,1.113,58,1.461,59,0.995,64,2.369,67,1.954,68,2.28,74,1.179,80,0.443,88,1.179,116,0.975,117,0.791,119,0.714,123,2.545,125,0.501,126,0.731,127,0.185,130,0.642,137,0.693,138,2.38,174,1.7,176,1.976,182,1.439,191,0.02,192,0.02,199,1.323,200,1.166,201,1.166,202,1.037,205,3.375,215,1.849,230,1.485,234,1.879,292,1.754,293,0.836,326,0.836,328,2.694,353,1.563,382,1.146,383,1.849,384,2.926,385,2.926,386,2.283,387,3.294,388,3.294,389,2.283,390,2.283,391,1.415,392,0.969,393,2.283,394,5.474,395,1.415,396,4.129,397,4.93,398,4.93,399,2.283,400,1.415,401,2.283,402,1.415,403,2.283,404,1.415,405,2.283,406,1.415,407,2.283,408,1.415,409,2.283,410,3.614,411,1.415,412,2.283,413,2.324,414,1.415,415,2.283,416,1.415,417,2.283,418,1.415,419,2.283,420,1.415,421,2.283,422,1.415,423,2.667,424,1.146,425,1.415,426,1.415,427,1.415,428,1.415,429,4.93,430,4.23,431,1.415,432,2.87,433,1.415,434,2.87,435,2.87,436,1.415,437,1.415,438,1.415,439,1.415,440,1.415,441,1.415,442,2.283,443,1.415,444,1.415,445,1.415,446,0.969,447,1.415,448,0.969,449,0.969,450,1.415]],["title/injectables/LoggingService.html",[451,1.646,452,1.437]],["body/injectables/LoggingService.html",[0,0.167,1,1.225,3,0.167,4,0.242,5,0.203,8,0.626,9,1.691,11,0.958,12,1.451,13,1.686,14,1.994,17,1.206,18,0.05,25,1.231,26,0.167,27,0.518,28,1.896,30,0.872,32,2.26,41,1.388,44,1.635,46,1.271,47,1.973,48,1.118,49,1.518,50,1.473,51,0.525,52,0.797,53,3.418,55,1.956,56,2.815,57,1.686,58,1.369,59,0.678,67,1.754,68,1.829,69,1.455,71,1.455,72,1.342,73,1.271,74,2.08,78,1.271,80,0.77,86,1.271,115,1.829,116,0.84,117,1.241,118,0.919,119,0.956,120,2.093,125,0.551,126,0.803,127,0.203,130,1.118,137,0.518,138,1.72,141,0.919,164,0.919,174,1.795,176,1.691,177,0.919,178,0.919,182,1.495,191,0.021,192,0.021,196,0.77,199,0.77,202,0.706,211,0.803,212,2.054,230,1.655,234,1.231,242,1.85,244,1.72,247,1.956,250,2.996,252,2.38,254,1.271,258,2.38,261,2.38,267,1.994,273,1.72,282,1.686,287,1.686,290,2.38,294,1.065,317,1.686,326,2.054,344,0.803,353,1.686,361,1.26,378,1.26,380,2.38,392,1.065,413,1.26,424,1.994,446,1.065,448,1.065,449,1.065,451,1.455,452,1.271,453,1.556,454,1.26,455,2.815,456,2.463,457,1.994,458,2.815,459,2.996,460,1.92,461,1.994,462,2.463,463,3.057,464,3.057,465,2.463,466,2.463,467,3.477,468,2.463,469,1.556,470,1.795,471,1.556,472,2.463,473,1.556,474,2.463,475,2.463,476,2.463,477,1.994,478,1.556,479,2.463,480,2.463,481,1.994,482,2.463,483,2.463,484,2.463,485,1.556,486,2.463,487,1.556,488,1.686,489,2.463,490,1.556,491,2.463,492,1.556,493,1.556,494,1.556,495,2.463,496,1.994,497,2.463,498,2.463,499,2.054,500,2.463,501,1.994,502,2.463,503,3.057,504,1.556,505,1.556,506,1.556,507,1.556,508,2.463,509,1.556,510,1.26,511,1.556,512,1.556,513,1.556,514,1.556,515,1.556,516,1.556,517,1.556,518,1.556,519,1.26,520,1.556,521,1.556,522,1.556,523,2.463,524,2.463,525,2.463,526,1.556,527,1.556,528,1.556,529,1.556,530,1.556,531,1.556,532,1.556,533,3.057,534,1.556,535,2.463,536,1.556,537,1.556,538,1.556,539,1.556,540,1.556,541,1.556,542,1.556,543,1.556,544,1.556,545,1.556,546,1.556,547,1.556,548,1.556,549,1.556,550,1.556,551,1.26,552,1.556,553,1.556,554,1.556,555,1.26,556,1.556,557,1.556,558,1.556,559,1.556,560,1.556,561,1.556,562,1.556,563,1.556,564,1.556,565,1.556,566,1.556,567,1.556,568,1.556,569,1.556]],["title/interfaces/LoggingServiceConfiguration.html",[193,0.506,470,1.437]],["body/interfaces/LoggingServiceConfiguration.html",[1,2.091,3,0.353,4,0.511,5,0.429,8,0.511,11,0.769,17,1.165,18,0.049,26,0.353,27,0.89,43,2.544,51,0.665,52,1.152,117,1.358,120,2.254,121,2.913,127,0.429,137,0.89,191,0.036,192,0.036,193,0.599,194,1.319,196,1.322,209,2.913,211,1.699,212,3.083,242,2.091,244,1.495,247,1.699,263,2.544,344,2.183,345,2.894,452,2.183,458,4.352,459,2.894,460,2.091,470,2.183,488,2.894,499,1.945,519,2.666,570,2.254,571,2.666,572,4.228,573,4.228,574,3.992,575,3.783,576,2.544]],["title/modules/LoggingServiceModule.html",[577,2.255,578,1.646]],["body/modules/LoggingServiceModule.html",[0,0.45,3,0.45,4,0.653,5,0.548,18,0.049,117,1.158,118,2.485,127,0.548,191,0.042,192,0.042,570,2.878,578,2.903,579,2.878,580,4.205,581,3.979,582,3.405,583,4.205,584,4.205]],["title/classes/MemoryAppender.html",[0,0.298,460,1.116]],["body/classes/MemoryAppender.html",[0,0.187,2,0.7,3,0.187,4,0.271,5,0.228,7,1.032,8,0.656,9,1.912,11,0.801,12,1.446,17,1.416,18,0.05,25,1.166,26,0.187,27,0.567,28,1.903,30,0.955,31,2.534,32,1.392,40,2.188,41,0.793,42,1.845,44,1.72,46,1.392,47,1.975,48,1.224,49,1.603,50,1.461,51,0.522,52,0.842,55,1.7,58,1.492,60,1.845,61,2.254,63,1.845,64,1.224,65,1.593,66,2.534,67,1.824,68,2.267,69,1.593,71,1.593,72,0.955,73,1.392,74,1.392,75,1.845,78,1.392,80,1.541,87,1.593,88,1.392,89,1.593,90,1.593,92,1.414,93,2.534,98,1.845,114,1.414,115,1.681,116,0.49,117,1.102,119,0.843,121,1.032,123,0.901,125,0.618,126,0.901,127,0.228,128,1.032,129,1.195,130,1.816,131,1.593,136,1.195,138,1.816,140,1.195,162,1.195,164,1.032,167,1.845,174,1.392,176,1.08,177,1.032,178,1.032,179,1.195,180,1.195,182,1.417,191,0.023,192,0.023,196,0.843,202,1.224,216,1.195,230,0.546,231,1.195,232,1.032,234,0.618,245,2.534,246,1.845,254,1.911,258,2.534,259,2.998,261,2.534,262,2.183,264,1.414,272,2.819,273,2.067,275,2.499,282,2.534,283,2.183,285,2.183,286,2.183,287,2.894,288,2.183,289,2.998,290,1.845,292,0.793,293,1.032,294,1.195,295,1.414,296,1.946,297,2.998,303,2.183,305,2.183,316,1.414,317,1.195,318,1.414,319,1.414,320,2.666,321,3.424,322,1.414,323,1.195,324,1.414,325,1.414,326,1.032,327,1.414,328,0.901,329,1.414,330,1.414,331,1.414,337,1.414,392,1.195,460,1.694,499,2.87,510,2.183,555,1.414,576,2.275,585,3.266,586,2.696,587,2.696,588,2.696,589,2.183,590,2.696,591,1.746,592,1.746,593,1.746,594,1.746,595,1.746,596,2.696,597,2.696,598,4.408,599,2.998,600,2.183,601,2.183,602,2.696,603,2.183,604,1.746,605,1.746,606,2.696,607,1.746,608,1.746,609,2.696,610,1.746,611,2.696]],["title/interfaces/MemoryAppenderConfiguration.html",[193,0.506,576,1.437]],["body/interfaces/MemoryAppenderConfiguration.html",[3,0.529,4,0.577,5,0.484,8,0.577,9,1.828,11,0.829,12,1.256,17,1.023,18,0.049,25,1.905,26,0.398,27,0.96,51,0.595,52,1.084,59,1.256,80,1.652,116,0.898,127,0.484,137,0.96,191,0.039,192,0.039,193,0.675,194,1.488,195,1.917,196,1.61,197,2.695,198,2.355,199,1.426,200,1.615,201,1.615,254,2.657,272,2.695,275,2.695,296,2.695,460,1.488,576,2.355,585,2.543]],["title/coverage.html",[612,3.065]],["body/coverage.html",[0,0.573,1,1.452,5,0.472,6,3.075,7,2.885,18,0.049,43,1.87,47,1.452,51,0.472,122,2.141,125,1.283,191,0.038,192,0.038,193,0.972,195,2.634,209,2.141,210,2.934,211,1.87,213,2.934,214,2.934,230,1.133,242,1.452,243,3.075,244,2.039,263,1.87,273,1.645,340,2.654,341,2.934,379,2.934,382,2.934,451,2.141,452,1.87,454,2.934,460,1.452,470,1.87,570,2.48,571,2.934,576,1.87,585,3.075,612,2.934,613,2.934,614,3.623,615,3.623,616,5.635,617,4.882,618,3.623,619,3.623,620,4.492,621,4.492,622,3.623,623,3.623,624,3.623,625,3.623,626,3.623,627,3.623]],["title/dependencies.html",[628,1.889,629,2.29]],["body/dependencies.html",[18,0.048,118,2.558,119,1.354,191,0.043,192,0.043,629,3.42,630,4.329,631,4.329,632,4.329,633,4.329,634,4.329,635,3.42]],["title/miscellaneous/enumerations.html",[636,1.889,637,2.709]],["body/miscellaneous/enumerations.html",[3,0.462,18,0.043,26,0.462,59,1.187,72,1.526,137,0.907,191,0.043,192,0.043,199,1.347,200,1.526,201,1.526,292,2.263,340,2.546,344,2.224,636,3.49,637,3.49,638,4.309,639,4.984]],["title/index.html",[26,0.25,640,2.333,641,2.333]],["body/index.html",[0,0.419,1,1.567,3,0.49,9,1.567,10,2.367,11,0.946,12,1.351,13,2,17,1.077,18,0.049,26,0.208,28,0.687,30,0.687,32,2.019,41,0.881,44,0.687,48,0.881,50,0.607,51,0.458,58,1.099,59,1.155,64,0.881,68,0.881,72,1.666,73,1.002,80,1.099,86,1.509,115,0.881,116,0.353,117,0.805,127,0.51,130,0.881,137,0.823,176,1.408,182,1.035,191,0.025,192,0.025,196,0.914,199,1.378,200,1.385,201,1.485,202,0.881,205,2.406,211,2.019,212,2.311,216,1.329,219,2.367,230,1.596,234,1.808,242,1.567,244,1.327,245,2,246,2.406,247,1.509,292,1.327,323,2,328,1.509,344,1.814,345,1.329,354,1.572,380,1.329,383,1.572,384,2.367,385,2.367,396,2.367,423,1.572,446,1.329,448,1.329,449,2.406,452,2.275,455,3.167,457,2.367,459,2.677,460,1.681,461,2.367,470,1.002,477,2.367,481,2.846,488,2.677,496,1.572,499,1.727,501,2.367,551,1.572,574,2.846,575,1.572,578,1.727,581,1.572,582,1.572,589,1.572,599,2.846,600,1.572,601,3.167,603,1.572,613,1.572,629,1.329,635,2,642,3.899,643,1.941,644,1.572,645,1.941,646,3.911,647,1.941,648,1.941,649,2.922,650,1.941,651,1.941,652,2.922,653,2.922,654,3.514,655,2.922,656,4.194,657,2.922,658,2.922,659,1.941,660,2.922,661,2.922,662,1.941,663,2.922,664,3.514,665,1.941,666,1.941,667,1.941,668,1.941,669,1.941,670,1.941,671,2.922,672,1.941,673,1.941,674,1.941,675,1.941,676,1.941,677,1.572,678,1.572,679,1.572,680,1.572,681,2.922,682,2.922,683,1.941,684,1.941,685,1.941,686,2.922,687,2.922,688,1.941,689,1.941,690,2.922,691,3.911,692,1.941,693,1.941,694,2.922,695,3.911,696,1.941,697,1.941,698,3.514,699,2.922,700,2.922,701,1.941,702,3.911,703,1.941,704,1.941,705,1.941,706,1.941,707,1.941,708,4.194,709,1.941,710,2.922,711,1.941,712,1.941,713,1.941,714,1.941,715,1.941,716,1.941,717,1.941,718,1.941,719,1.941,720,1.941,721,2.922,722,2.922,723,1.941,724,1.941,725,1.941,726,1.941,727,1.941,728,2.922,729,1.941,730,1.941,731,1.941,732,1.941,733,1.941,734,1.941,735,2.922,736,1.941,737,2.922,738,1.941,739,2.922,740,1.941,741,1.941,742,2.922,743,1.941,744,1.941,745,2.922,746,2.922,747,2.922,748,1.941,749,1.941,750,2.922,751,1.941,752,3.514,753,1.941,754,1.941,755,1.941,756,1.941,757,1.941,758,1.941,759,1.941,760,1.941,761,1.941,762,1.941,763,1.941,764,1.941,765,1.941,766,1.941,767,1.941,768,1.941,769,1.941,770,1.941,771,1.941,772,1.941,773,1.941,774,2.922,775,2.922,776,1.941,777,1.941,778,2.922,779,1.941,780,1.941,781,1.941,782,1.941,783,1.941,784,1.941,785,1.941,786,1.941,787,1.941,788,1.941,789,1.941,790,1.941,791,1.941,792,1.941,793,1.941,794,1.941,795,1.941,796,2.922,797,1.941,798,1.941,799,1.941,800,2.922,801,1.941,802,2.922]],["title/modules.html",[579,2.591]],["body/modules.html",[18,0.043,191,0.043,192,0.043,578,2.629,579,3.046,803,4.45]],["title/overview.html",[804,3.065]],["body/overview.html",[2,1.758,18,0.043,133,3.447,191,0.043,192,0.043,194,1.758,451,2.593,577,3.554,804,3.554,805,5.036]],["title/properties.html",[27,0.704,628,1.889]],["body/properties.html",[8,0.65,18,0.048,27,0.881,72,1.84,119,1.309,191,0.042,192,0.042,635,2.866,642,3.968,644,3.39,677,3.39,678,3.39,679,3.39,680,3.39,806,4.186,807,4.186,808,4.186,809,4.186,810,4.186,811,4.186,812,4.186,813,4.186,814,4.186,815,4.186]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":135,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["1",{"_index":133,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"overview.html":{}}}],["1.2.1",{"_index":674,"title":{},"body":{"index.html":{}}}],["1.4.16",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":22,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["10.0.0",{"_index":659,"title":{},"body":{"index.html":{}}}],["10/10",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":658,"title":{},"body":{"index.html":{}}}],["11/11",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["12.0.0",{"_index":657,"title":{},"body":{"index.html":{}}}],["12/12",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["13.0.0",{"_index":655,"title":{},"body":{"index.html":{}}}],["13/13",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":653,"title":{},"body":{"index.html":{}}}],["14/14",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["15.0.0",{"_index":652,"title":{},"body":{"index.html":{}}}],["16.0.0",{"_index":635,"title":{},"body":{"dependencies.html":{},"index.html":{},"properties.html":{}}}],["17.0.0",{"_index":651,"title":{},"body":{"index.html":{}}}],["18:49:43.794",{"_index":707,"title":{},"body":{"index.html":{}}}],["18:49:43.797",{"_index":709,"title":{},"body":{"index.html":{}}}],["18:49:43.801",{"_index":710,"title":{},"body":{"index.html":{}}}],["18:49:43.814",{"_index":713,"title":{},"body":{"index.html":{}}}],["2",{"_index":714,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":671,"title":{},"body":{"index.html":{}}}],["2.2.0",{"_index":672,"title":{},"body":{"index.html":{}}}],["2.2.1",{"_index":675,"title":{},"body":{"index.html":{}}}],["2.3.1",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["2.4.8",{"_index":673,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":296,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["3.0.0",{"_index":670,"title":{},"body":{"index.html":{}}}],["3.1.0",{"_index":669,"title":{},"body":{"index.html":{}}}],["3.9.0",{"_index":668,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":664,"title":{},"body":{"index.html":{}}}],["4.7.0",{"_index":662,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":711,"title":{},"body":{"index.html":{}}}],["5",{"_index":715,"title":{},"body":{"index.html":{}}}],["5.0.0",{"_index":656,"title":{},"body":{"index.html":{}}}],["5.1.0",{"_index":667,"title":{},"body":{"index.html":{}}}],["500",{"_index":255,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["6",{"_index":805,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":654,"title":{},"body":{"index.html":{}}}],["6.1.9",{"_index":646,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":24,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["7.0.0",{"_index":663,"title":{},"body":{"index.html":{}}}],["8",{"_index":157,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["8.0.0",{"_index":661,"title":{},"body":{"index.html":{}}}],["9.0.0",{"_index":660,"title":{},"body":{"index.html":{}}}],["99]logger",{"_index":716,"title":{},"body":{"index.html":{}}}],["a.b",{"_index":740,"title":{},"body":{"index.html":{}}}],["a.b.c",{"_index":739,"title":{},"body":{"index.html":{}}}],["a.b.c.d",{"_index":737,"title":{},"body":{"index.html":{}}}],["a.tostring",{"_index":554,"title":{},"body":{"injectables/LoggingService.html":{}}}],["add",{"_index":323,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["added",{"_index":498,"title":{},"body":{"injectables/LoggingService.html":{}}}],["additional",{"_index":800,"title":{},"body":{"index.html":{}}}],["additionally",{"_index":741,"title":{},"body":{"index.html":{}}}],["ajax",{"_index":120,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["ajaxappender",{"_index":1,"title":{"classes/AjaxAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["ajaxappender(configuration.ajaxappender",{"_index":541,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.appenderfailed.subscribe((message",{"_index":542,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.batchsizedefault",{"_index":166,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.thresholddefault",{"_index":168,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.timerintervaldefault",{"_index":170,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappenderconfiguration",{"_index":43,"title":{"interfaces/AjaxAppenderConfiguration.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["ajaxappenderfailed",{"_index":463,"title":{},"body":{"injectables/LoggingService.html":{}}}],["alerts",{"_index":511,"title":{},"body":{"injectables/LoggingService.html":{}}}],["allows",{"_index":288,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["already",{"_index":317,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["amend",{"_index":462,"title":{},"body":{"injectables/LoggingService.html":{}}}],["angular",{"_index":650,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":118,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"dependencies.html":{}}}],["anything",{"_index":588,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["api",{"_index":802,"title":{},"body":{"index.html":{}}}],["app",{"_index":722,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":784,"title":{},"body":{"index.html":{}}}],["app_initializer",{"_index":792,"title":{},"body":{"index.html":{}}}],["append",{"_index":31,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["append(loggingevent",{"_index":60,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appended",{"_index":66,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender",{"_index":9,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["appender's",{"_index":93,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration",{"_index":121,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration.ts",{"_index":195,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["appender.model",{"_index":503,"title":{},"body":{"injectables/LoggingService.html":{}}}],["appender.model.ts",{"_index":7,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["appender.model.ts:100",{"_index":268,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:105",{"_index":604,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:112",{"_index":594,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:113",{"_index":62,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:121",{"_index":265,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:123",{"_index":114,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:131",{"_index":84,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:137",{"_index":593,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:138",{"_index":79,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:144",{"_index":595,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:146",{"_index":291,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:147",{"_index":104,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:153",{"_index":269,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:154",{"_index":92,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:160",{"_index":274,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:161",{"_index":109,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:168",{"_index":96,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:171",{"_index":284,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:177",{"_index":111,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:193",{"_index":271,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:201",{"_index":266,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:32",{"_index":264,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:34",{"_index":54,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:38",{"_index":45,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:60",{"_index":592,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:67",{"_index":277,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:78",{"_index":591,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:86",{"_index":70,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:88",{"_index":281,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appenderfailed",{"_index":29,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appenders",{"_index":551,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["appenders.find((a",{"_index":553,"title":{},"body":{"injectables/LoggingService.html":{}}}],["application/json",{"_index":155,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appmodule",{"_index":687,"title":{},"body":{"index.html":{}}}],["apps",{"_index":678,"title":{},"body":{"index.html":{},"properties.html":{}}}],["arg",{"_index":410,"title":{},"body":{"classes/Logger.html":{}}}],["arg.tostring",{"_index":442,"title":{},"body":{"classes/Logger.html":{}}}],["args",{"_index":429,"title":{},"body":{"classes/Logger.html":{}}}],["args.push(this.formatargument(param",{"_index":430,"title":{},"body":{"classes/Logger.html":{}}}],["argument",{"_index":409,"title":{},"body":{"classes/Logger.html":{}}}],["array",{"_index":575,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["author",{"_index":813,"title":{},"body":{"properties.html":{}}}],["automatically",{"_index":738,"title":{},"body":{"index.html":{}}}],["available",{"_index":753,"title":{},"body":{"index.html":{}}}],["backend",{"_index":774,"title":{},"body":{"index.html":{}}}],["batch",{"_index":106,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["batchsize",{"_index":21,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["batchsizedefault",{"_index":132,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["behind",{"_index":550,"title":{},"body":{"injectables/LoggingService.html":{}}}],["below",{"_index":692,"title":{},"body":{"index.html":{}}}],["beta",{"_index":666,"title":{},"body":{"index.html":{}}}],["between",{"_index":100,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["boolean",{"_index":139,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["browse",{"_index":803,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":519,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["browser's",{"_index":246,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["browserconsoleappender",{"_index":212,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["browserconsoleappenderconfiguration",{"_index":209,"title":{"interfaces/BrowserConsoleAppenderConfiguration.html":{}},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["builds",{"_index":733,"title":{},"body":{"index.html":{}}}],["built",{"_index":679,"title":{},"body":{"index.html":{},"properties.html":{}}}],["c",{"_index":524,"title":{},"body":{"injectables/LoggingService.html":{}}}],["call",{"_index":778,"title":{},"body":{"index.html":{}}}],["callback",{"_index":598,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["called",{"_index":599,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["case",{"_index":361,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["catch",{"_index":448,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["change",{"_index":496,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["changed",{"_index":171,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["charset=utf",{"_index":156,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["class",{"_index":0,"title":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"overview.html":{}}}],["clearlog",{"_index":256,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["code",{"_index":694,"title":{},"body":{"index.html":{}}}],["complete",{"_index":746,"title":{},"body":{"index.html":{}}}],["component",{"_index":717,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":17,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["configuration.ajaxappender",{"_index":540,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.batchsize",{"_index":165,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.browserconsoleappender",{"_index":560,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.browserconsoleappender.threshold",{"_index":561,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstorageappender",{"_index":545,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstoragekey",{"_index":298,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["configuration.loglevels",{"_index":535,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.maxmessages",{"_index":305,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.memoryappender",{"_index":558,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.threshold",{"_index":167,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.timerinterval",{"_index":169,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.url",{"_index":144,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.withcredentials",{"_index":148,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configure",{"_index":32,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["configure(configuration",{"_index":69,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["configure](#configure",{"_index":506,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configurelogging",{"_index":794,"title":{},"body":{"index.html":{}}}],["configurelogging(loggingservice",{"_index":785,"title":{},"body":{"index.html":{}}}],["configures",{"_index":71,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["console",{"_index":211,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["consolelogs",{"_index":772,"title":{},"body":{"index.html":{}}}],["const",{"_index":176,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor",{"_index":41,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor(configuration",{"_index":42,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["constructor(logger",{"_index":390,"title":{},"body":{"classes/Logger.html":{}}}],["containing",{"_index":223,"title":{},"body":{"classes/JsonLayout.html":{}}}],["convertedthreshold",{"_index":177,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["converting",{"_index":343,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["converts",{"_index":352,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["cookies",{"_index":208,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["correspond",{"_index":754,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":612,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":514,"title":{},"body":{"injectables/LoggingService.html":{}}}],["creates",{"_index":46,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["creating",{"_index":475,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ctor",{"_index":698,"title":{},"body":{"index.html":{}}}],["current",{"_index":482,"title":{},"body":{"injectables/LoggingService.html":{}}}],["currently",{"_index":285,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["data",{"_index":78,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["date",{"_index":381,"title":{},"body":{"interfaces/LogMessage.html":{}}}],["date(logmessage.timestamp",{"_index":314,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["debug",{"_index":199,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["debug(methodname",{"_index":393,"title":{},"body":{"classes/Logger.html":{}}}],["debugger",{"_index":520,"title":{},"body":{"injectables/LoggingService.html":{}}}],["declarations",{"_index":583,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["default",{"_index":196,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["define",{"_index":745,"title":{},"body":{"index.html":{}}}],["defined",{"_index":44,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["definition",{"_index":573,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["definitions",{"_index":795,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":629,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["depending",{"_index":73,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["deps",{"_index":788,"title":{},"body":{"index.html":{}}}],["derive",{"_index":489,"title":{},"body":{"injectables/LoggingService.html":{}}}],["describe",{"_index":720,"title":{},"body":{"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"properties.html":{}}}],["development",{"_index":770,"title":{},"body":{"index.html":{}}}],["different",{"_index":345,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["disable",{"_index":761,"title":{},"body":{"index.html":{}}}],["disables",{"_index":763,"title":{},"body":{"index.html":{}}}],["display",{"_index":528,"title":{},"body":{"injectables/LoggingService.html":{}}}],["documentation",{"_index":613,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotnet",{"_index":730,"title":{},"body":{"index.html":{}}}],["dots",{"_index":727,"title":{},"body":{"index.html":{}}}],["during",{"_index":769,"title":{},"body":{"index.html":{}}}],["e",{"_index":449,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["e.g",{"_index":695,"title":{},"body":{"index.html":{}}}],["e.message",{"_index":450,"title":{},"body":{"classes/Logger.html":{}}}],["each",{"_index":82,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["element",{"_index":319,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["emitter",{"_index":515,"title":{},"body":{"injectables/LoggingService.html":{}}}],["empty",{"_index":143,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["enable",{"_index":760,"title":{},"body":{"index.html":{}}}],["enabled",{"_index":586,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["encapsulates",{"_index":676,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":548,"title":{},"body":{"injectables/LoggingService.html":{}}}],["entry",{"_index":384,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["entry(methodname",{"_index":399,"title":{},"body":{"classes/Logger.html":{}}}],["enumerations",{"_index":637,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":783,"title":{},"body":{"index.html":{}}}],["environment.ts",{"_index":782,"title":{},"body":{"index.html":{}}}],["error",{"_index":59,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["error(\"configuration",{"_index":142,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["error(\"localstoragekey",{"_index":299,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["error(\"url",{"_index":145,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["error(\"withcredentials",{"_index":172,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["error(`invalid",{"_index":378,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["error(methodname",{"_index":401,"title":{},"body":{"classes/Logger.html":{}}}],["errors",{"_index":512,"title":{},"body":{"injectables/LoggingService.html":{}}}],["event",{"_index":55,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["eventemitter",{"_index":53,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["eventobj",{"_index":229,"title":{},"body":{"classes/JsonLayout.html":{}}}],["eventual",{"_index":549,"title":{},"body":{"injectables/LoggingService.html":{}}}],["example",{"_index":750,"title":{},"body":{"index.html":{}}}],["exist",{"_index":476,"title":{},"body":{"injectables/LoggingService.html":{}}}],["existing",{"_index":302,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["exit",{"_index":385,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["exit(methodname",{"_index":403,"title":{},"body":{"classes/Logger.html":{}}}],["export",{"_index":127,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["exports",{"_index":584,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["extends",{"_index":128,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["false",{"_index":153,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["fatal",{"_index":200,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["fatal(methodname",{"_index":405,"title":{},"body":{"classes/Logger.html":{}}}],["feedback",{"_index":776,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["finally",{"_index":693,"title":{},"body":{"index.html":{}}}],["first",{"_index":685,"title":{},"body":{"index.html":{}}}],["following",{"_index":457,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["follows",{"_index":756,"title":{},"body":{"index.html":{}}}],["format",{"_index":224,"title":{},"body":{"classes/JsonLayout.html":{}}}],["format(loggingevent",{"_index":225,"title":{},"body":{"classes/JsonLayout.html":{}}}],["formatargument",{"_index":386,"title":{},"body":{"classes/Logger.html":{}}}],["formatargument(arg",{"_index":407,"title":{},"body":{"classes/Logger.html":{}}}],["formats",{"_index":215,"title":{},"body":{"classes/JsonLayout.html":{},"classes/Logger.html":{}}}],["formatted",{"_index":398,"title":{},"body":{"classes/Logger.html":{}}}],["framework",{"_index":680,"title":{},"body":{"index.html":{},"properties.html":{}}}],["full",{"_index":318,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["function",{"_index":603,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["functionalities",{"_index":677,"title":{},"body":{"index.html":{},"properties.html":{}}}],["functionality",{"_index":456,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getbatchsize",{"_index":33,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternalappender",{"_index":34,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternallogger",{"_index":387,"title":{},"body":{"classes/Logger.html":{}}}],["getlayout",{"_index":35,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getlocalstoragekey",{"_index":257,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["getlogger",{"_index":465,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogger(loggername",{"_index":472,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getloglevel",{"_index":388,"title":{},"body":{"classes/Logger.html":{}}}],["getlogmessages",{"_index":258,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["getlogmessagesfromlocalstorage",{"_index":466,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogmessagesfromlocalstorage(localstoragekey",{"_index":484,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getmaxmessages",{"_index":259,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["getrootlogger",{"_index":467,"title":{},"body":{"injectables/LoggingService.html":{}}}],["gets",{"_index":115,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["gettimerinterval",{"_index":36,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getting",{"_index":640,"title":{"index.html":{}},"body":{}}],["given",{"_index":74,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["greater",{"_index":765,"title":{},"body":{"index.html":{}}}],["happen",{"_index":497,"title":{},"body":{"injectables/LoggingService.html":{}}}],["hello",{"_index":712,"title":{},"body":{"index.html":{}}}],["helper",{"_index":342,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["here",{"_index":445,"title":{},"body":{"classes/Logger.html":{}}}],["hierarchy",{"_index":735,"title":{},"body":{"index.html":{}}}],["higher",{"_index":798,"title":{},"body":{"index.html":{}}}],["http",{"_index":15,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["https://github.com/ritzlgrmft/ionic",{"_index":811,"title":{},"body":{"properties.html":{}}}],["https://my.backend.xy/loggingbackend",{"_index":20,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["identifier",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["immediatedly",{"_index":203,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["implemenatation",{"_index":218,"title":{},"body":{"classes/JsonLayout.html":{}}}],["import",{"_index":117,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["important",{"_index":743,"title":{},"body":{"index.html":{}}}],["imports",{"_index":582,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["improvement",{"_index":221,"title":{},"body":{"classes/JsonLayout.html":{}}}],["included",{"_index":758,"title":{},"body":{"index.html":{}}}],["includes",{"_index":751,"title":{},"body":{"index.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info(methodname",{"_index":415,"title":{},"body":{"classes/Logger.html":{}}}],["inform",{"_index":608,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["inherit",{"_index":744,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":451,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":453,"title":{},"body":{"injectables/LoggingService.html":{}}}],["instance",{"_index":48,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["instanceof",{"_index":443,"title":{},"body":{"classes/Logger.html":{}}}],["instead",{"_index":797,"title":{},"body":{"index.html":{}}}],["intended",{"_index":759,"title":{},"body":{"index.html":{}}}],["interface",{"_index":193,"title":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["interfaces",{"_index":194,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"overview.html":{}}}],["internal",{"_index":353,"title":{},"body":{"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["internally",{"_index":85,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["interval",{"_index":113,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["ionic",{"_index":642,"title":{},"body":{"index.html":{},"properties.html":{}}}],["ionic.logging.ajaxappender",{"_index":183,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ionic.logging.jsonlayout",{"_index":241,"title":{},"body":{"classes/JsonLayout.html":{}}}],["ionic.logging.localstorageappender",{"_index":336,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["ionic.logging.memoryappender",{"_index":555,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["java",{"_index":732,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":204,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/JsonLayout.html":{}}}],["json",{"_index":123,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["json.parse(localstorage.getitem(localstoragekey",{"_index":310,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["json.stringify",{"_index":444,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(arg",{"_index":447,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(eventobj",{"_index":240,"title":{},"body":{"classes/JsonLayout.html":{}}}],["json.stringify(this.logmessages",{"_index":335,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["jsonlayout",{"_index":122,"title":{"classes/JsonLayout.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"coverage.html":{}}}],["jsonlayout(false",{"_index":152,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["keeps",{"_index":775,"title":{},"body":{"index.html":{}}}],["key",{"_index":250,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["keywords",{"_index":806,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":734,"title":{},"body":{"index.html":{}}}],["last",{"_index":479,"title":{},"body":{"injectables/LoggingService.html":{}}}],["later",{"_index":773,"title":{},"body":{"index.html":{}}}],["latest",{"_index":643,"title":{},"body":{"index.html":{}}}],["layout",{"_index":94,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["layout's",{"_index":228,"title":{},"body":{"classes/JsonLayout.html":{}}}],["layout.model",{"_index":124,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["layout.model.ts",{"_index":214,"title":{},"body":{"classes/JsonLayout.html":{},"coverage.html":{}}}],["layout.model.ts:14",{"_index":226,"title":{},"body":{"classes/JsonLayout.html":{}}}],["layout.model.ts:31",{"_index":227,"title":{},"body":{"classes/JsonLayout.html":{}}}],["length",{"_index":97,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["level",{"_index":234,"title":{},"body":{"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["level.converter",{"_index":126,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["level.converter.ts",{"_index":341,"title":{},"body":{"classes/LogLevelConverter.html":{},"coverage.html":{}}}],["level.converter.ts:16",{"_index":351,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:45",{"_index":356,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:74",{"_index":359,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.loggername",{"_index":536,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.loglevel",{"_index":539,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.model",{"_index":293,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["level.model.ts",{"_index":639,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["level.warn",{"_index":777,"title":{},"body":{"index.html":{}}}],["levelfromlog4javascript",{"_index":346,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromlog4javascript(level",{"_index":349,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring",{"_index":347,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring(level",{"_index":355,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levels",{"_index":344,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["leveltolog4javascript",{"_index":348,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["leveltolog4javascript(level",{"_index":358,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["license",{"_index":808,"title":{},"body":{"properties.html":{}}}],["limited",{"_index":483,"title":{},"body":{"injectables/LoggingService.html":{}}}],["load",{"_index":278,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loadlogmessages",{"_index":260,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loadlogmessages(localstoragekey",{"_index":276,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loads",{"_index":486,"title":{},"body":{"injectables/LoggingService.html":{}}}],["local",{"_index":247,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["localstorage",{"_index":333,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.getitem(localstoragekey",{"_index":308,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.removeitem(localstoragekey",{"_index":315,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.removeitem(this.localstoragekey",{"_index":339,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.setitem(this.localstoragekey",{"_index":334,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender",{"_index":242,"title":{"classes/LocalStorageAppender.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["localstorageappender(configuration.localstorageappender",{"_index":546,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.loadlogmessages(localstoragekey",{"_index":567,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.loadlogmessages(this.localstoragekey",{"_index":304,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.maxmessagesdefault",{"_index":306,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.removelogmessages(localstoragekey",{"_index":569,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.thresholddefault",{"_index":307,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappenderconfiguration",{"_index":263,"title":{"interfaces/LocalStorageAppenderConfiguration.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["localstoragekey",{"_index":252,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["log",{"_index":11,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["log4javascript",{"_index":119,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"dependencies.html":{},"properties.html":{}}}],["log4javascript's",{"_index":354,"title":{},"body":{"classes/LogLevelConverter.html":{},"index.html":{}}}],["log4javascript.ajaxappender",{"_index":91,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.ajaxappender(configuration.url",{"_index":147,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.appender",{"_index":129,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.browserconsoleappender",{"_index":508,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(level.loggername",{"_index":537,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(logger",{"_index":425,"title":{},"body":{"classes/Logger.html":{}}}],["log4javascript.getrootlogger",{"_index":424,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(ajaxappender",{"_index":544,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(localstorageappender",{"_index":547,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(memoryappender",{"_index":557,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().removeappender(memoryappender",{"_index":556,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.jsonlayout",{"_index":220,"title":{},"body":{"classes/JsonLayout.html":{}}}],["log4javascript.layout",{"_index":95,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.level",{"_index":350,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.all",{"_index":362,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.debug",{"_index":364,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.error",{"_index":366,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.fatal",{"_index":368,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.info",{"_index":370,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.off",{"_index":372,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.trace",{"_index":374,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.warn",{"_index":376,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.logger",{"_index":413,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.loggingevent",{"_index":61,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.loglog.setquietmode(true",{"_index":513,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.patternlayout(\"%d{hh:mm:ss,sss",{"_index":523,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logged",{"_index":396,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["logger",{"_index":230,"title":{"classes/Logger.html":{}},"body":{"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["logger's",{"_index":748,"title":{},"body":{"index.html":{}}}],["logger().getinternallogger().geteffectiveappenders",{"_index":552,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger(loggername",{"_index":564,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.browserconsoleappender",{"_index":527,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.memoryappender",{"_index":534,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.model",{"_index":504,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(log4javascript.level.warn",{"_index":518,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(loglevelconverter.leveltolog4javascript(loglevelconverter.levelfromstring(level.loglevel",{"_index":538,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loggername",{"_index":477,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["loggers",{"_index":488,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logging",{"_index":72,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["loggingevent",{"_index":65,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.getcombinedmessages",{"_index":238,"title":{},"body":{"classes/JsonLayout.html":{}}}],["loggingevent.level.tostring",{"_index":235,"title":{},"body":{"classes/JsonLayout.html":{}}}],["loggingevent.logger",{"_index":325,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logger.name",{"_index":231,"title":{},"body":{"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages",{"_index":239,"title":{},"body":{"classes/JsonLayout.html":{}}}],["loggingevent.messages.slice(1",{"_index":327,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages[0",{"_index":329,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.timestamp",{"_index":330,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.timestampinmilliseconds",{"_index":233,"title":{},"body":{"classes/JsonLayout.html":{}}}],["loggingservice",{"_index":452,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["loggingservice.configure(environment.logging",{"_index":786,"title":{},"body":{"index.html":{}}}],["loggingservice.getlogger(\"myapp.mycomponent",{"_index":697,"title":{},"body":{"index.html":{}}}],["loggingserviceconfiguration",{"_index":470,"title":{"interfaces/LoggingServiceConfiguration.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["loggingservicemodule",{"_index":578,"title":{"modules/LoggingServiceModule.html":{}},"body":{"modules/LoggingServiceModule.html":{},"index.html":{},"modules.html":{}}}],["loglevel",{"_index":292,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loglevel.all",{"_index":363,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.debug",{"_index":365,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.error",{"_index":367,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.fatal",{"_index":369,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.info",{"_index":371,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.off",{"_index":373,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.trace",{"_index":375,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.warn",{"_index":377,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel[loglevelconverter.levelfromlog4javascript(loggingevent.level",{"_index":324,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter",{"_index":125,"title":{"classes/LogLevelConverter.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["loglevelconverter.levelfromlog4javascript(this.logger.getlevel",{"_index":426,"title":{},"body":{"classes/Logger.html":{}}}],["loglevelconverter.levelfromstring(configuration.browserconsoleappender.threshold",{"_index":562,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loglevelconverter.levelfromstring(configuration.threshold",{"_index":179,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter.leveltolog4javascript",{"_index":178,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["loglevels",{"_index":574,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logmessage",{"_index":273,"title":{"interfaces/LogMessage.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["logmessage.timestamp",{"_index":313,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["logmessages",{"_index":297,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["logmessageschanged",{"_index":464,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logs",{"_index":205,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/Logger.html":{},"index.html":{}}}],["look",{"_index":682,"title":{},"body":{"index.html":{}}}],["lower",{"_index":764,"title":{},"body":{"index.html":{}}}],["m",{"_index":525,"title":{},"body":{"injectables/LoggingService.html":{}}}],["mainly",{"_index":87,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["make",{"_index":767,"title":{},"body":{"index.html":{}}}],["markus",{"_index":814,"title":{},"body":{"properties.html":{}}}],["massages",{"_index":500,"title":{},"body":{"injectables/LoggingService.html":{}}}],["matching",{"_index":192,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maximum",{"_index":275,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessages",{"_index":254,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessagesdefault",{"_index":295,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["meaning",{"_index":766,"title":{},"body":{"index.html":{}}}],["means",{"_index":481,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["memory",{"_index":499,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["memoryappender",{"_index":460,"title":{"classes/MemoryAppender.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["memoryappender.maxmessagesdefault",{"_index":606,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender.thresholddefault",{"_index":607,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender](../memoryappender.html",{"_index":565,"title":{},"body":{"injectables/LoggingService.html":{}}}],["memoryappenderconfiguration",{"_index":576,"title":{"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["message",{"_index":58,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["message.model",{"_index":294,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["message.model.ts",{"_index":379,"title":{},"body":{"interfaces/LogMessage.html":{},"coverage.html":{}}}],["messages",{"_index":12,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["method",{"_index":64,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methodname",{"_index":328,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methods",{"_index":30,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["milliseconds",{"_index":99,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["miscellaneous",{"_index":636,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["mit",{"_index":809,"title":{},"body":{"properties.html":{}}}],["mobile",{"_index":807,"title":{},"body":{"properties.html":{}}}],["modified",{"_index":77,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["module",{"_index":577,"title":{"modules/LoggingServiceModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":579,"title":{"modules.html":{}},"body":{"modules/LoggingServiceModule.html":{},"modules.html":{}}}],["more",{"_index":286,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["much",{"_index":337,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["multi",{"_index":789,"title":{},"body":{"index.html":{}}}],["myapp.mycomponent",{"_index":708,"title":{},"body":{"index.html":{}}}],["myapp.mynamespace.mylogger",{"_index":796,"title":{},"body":{"index.html":{}}}],["mycomponent",{"_index":696,"title":{},"body":{"index.html":{}}}],["mylogs",{"_index":253,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["mymethod",{"_index":702,"title":{},"body":{"index.html":{}}}],["mymethod(index",{"_index":701,"title":{},"body":{"index.html":{}}}],["name",{"_index":50,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["named",{"_index":736,"title":{},"body":{"index.html":{}}}],["namespaces",{"_index":729,"title":{},"body":{"index.html":{}}}],["need",{"_index":686,"title":{},"body":{"index.html":{}}}],["needed",{"_index":645,"title":{},"body":{"index.html":{}}}],["new",{"_index":47,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["next",{"_index":688,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":581,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["notation",{"_index":217,"title":{},"body":{"classes/JsonLayout.html":{}}}],["null",{"_index":309,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["number",{"_index":80,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["object",{"_index":216,"title":{},"body":{"classes/JsonLayout.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["objects",{"_index":397,"title":{},"body":{"classes/Logger.html":{}}}],["older",{"_index":647,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":289,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["one",{"_index":501,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["onlogmessageschangedcallback",{"_index":605,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["optional",{"_index":52,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["ordered",{"_index":755,"title":{},"body":{"index.html":{}}}],["output",{"_index":706,"title":{},"body":{"index.html":{}}}],["overview",{"_index":804,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":75,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["package",{"_index":628,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":731,"title":{},"body":{"index.html":{}}}],["page",{"_index":529,"title":{},"body":{"injectables/LoggingService.html":{}}}],["par",{"_index":749,"title":{},"body":{"index.html":{}}}],["param",{"_index":138,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["parameters",{"_index":49,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["params",{"_index":394,"title":{},"body":{"classes/Logger.html":{}}}],["parent",{"_index":742,"title":{},"body":{"index.html":{}}}],["partial",{"_index":572,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["parts",{"_index":725,"title":{},"body":{"index.html":{}}}],["peer",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":719,"title":{},"body":{"index.html":{}}}],["place",{"_index":721,"title":{},"body":{"index.html":{}}}],["placed",{"_index":723,"title":{},"body":{"index.html":{}}}],["possible",{"_index":461,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["potentially",{"_index":495,"title":{},"body":{"injectables/LoggingService.html":{}}}],["prevent",{"_index":509,"title":{},"body":{"injectables/LoggingService.html":{}}}],["private",{"_index":130,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["process",{"_index":162,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["produce",{"_index":705,"title":{},"body":{"index.html":{}}}],["properties",{"_index":27,"title":{"properties.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"properties.html":{}}}],["provide",{"_index":791,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":507,"title":{},"body":{"injectables/LoggingService.html":{}}}],["providers",{"_index":787,"title":{},"body":{"index.html":{}}}],["public",{"_index":28,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["purposes",{"_index":90,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["queued",{"_index":102,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["quite",{"_index":728,"title":{},"body":{"index.html":{}}}],["rc",{"_index":665,"title":{},"body":{"index.html":{}}}],["read",{"_index":301,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["realtime",{"_index":602,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["recommended",{"_index":780,"title":{},"body":{"index.html":{}}}],["registers",{"_index":597,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["remaining",{"_index":163,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["remove",{"_index":282,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removed",{"_index":290,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removelogmessages",{"_index":261,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removelogmessages(localstoragekey",{"_index":280,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["removelogmessagesfromlocalstorage",{"_index":468,"title":{},"body":{"injectables/LoggingService.html":{}}}],["removelogmessagesfromlocalstorage(localstoragekey",{"_index":491,"title":{},"body":{"injectables/LoggingService.html":{}}}],["removes",{"_index":267,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{}}}],["repository",{"_index":810,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":357,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["request",{"_index":83,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["respectively",{"_index":762,"title":{},"body":{"index.html":{}}}],["responsible",{"_index":718,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":799,"title":{},"body":{"index.html":{}}}],["result",{"_index":704,"title":{},"body":{"index.html":{}}}],["results",{"_index":191,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieved",{"_index":480,"title":{},"body":{"injectables/LoggingService.html":{}}}],["return",{"_index":182,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["returns",{"_index":67,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["root",{"_index":459,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["same",{"_index":219,"title":{},"body":{"classes/JsonLayout.html":{},"index.html":{}}}],["sample",{"_index":681,"title":{},"body":{"index.html":{}}}],["saved",{"_index":248,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["see",{"_index":691,"title":{},"body":{"index.html":{}}}],["send",{"_index":57,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["sending",{"_index":101,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["sends",{"_index":10,"title":{},"body":{"classes/AjaxAppender.html":{},"index.html":{}}}],["sent",{"_index":81,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["separated",{"_index":726,"title":{},"body":{"index.html":{}}}],["serialized",{"_index":249,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["serializing",{"_index":222,"title":{},"body":{"classes/JsonLayout.html":{}}}],["serve",{"_index":771,"title":{},"body":{"index.html":{}}}],["server",{"_index":13,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["service",{"_index":455,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["service.configuration",{"_index":505,"title":{},"body":{"injectables/LoggingService.html":{}}}],["service.configuration.ts",{"_index":571,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["service.git",{"_index":812,"title":{},"body":{"properties.html":{}}}],["service.module.ts",{"_index":580,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["set",{"_index":202,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["setbatchsize",{"_index":37,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setbatchsize(batchsize",{"_index":103,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout",{"_index":38,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout(layout",{"_index":108,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setloglevel",{"_index":389,"title":{},"body":{"classes/Logger.html":{}}}],["setloglevel(level",{"_index":417,"title":{},"body":{"classes/Logger.html":{}}}],["setmaxmessages",{"_index":262,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setmaxmessages(value",{"_index":283,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback",{"_index":590,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback(callback",{"_index":596,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["sets",{"_index":105,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval",{"_index":39,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval(timerinterval",{"_index":110,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setting",{"_index":747,"title":{},"body":{"index.html":{}}}],["settings",{"_index":458,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["severe",{"_index":757,"title":{},"body":{"index.html":{}}}],["severity",{"_index":752,"title":{},"body":{"index.html":{}}}],["show",{"_index":510,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["single",{"_index":724,"title":{},"body":{"index.html":{}}}],["size",{"_index":107,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["spcific",{"_index":502,"title":{},"body":{"injectables/LoggingService.html":{}}}],["specific",{"_index":63,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["specified",{"_index":474,"title":{},"body":{"injectables/LoggingService.html":{}}}],["specifies",{"_index":206,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["specify",{"_index":587,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["src/.../log",{"_index":638,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/lib/ajax",{"_index":6,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/browser",{"_index":210,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/json",{"_index":213,"title":{},"body":{"classes/JsonLayout.html":{},"coverage.html":{}}}],["src/lib/local",{"_index":243,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/log",{"_index":340,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/logger.model.ts",{"_index":382,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["src/lib/logger.model.ts:11",{"_index":391,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:112",{"_index":402,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:128",{"_index":406,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:145",{"_index":400,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:164",{"_index":404,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:179",{"_index":408,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:199",{"_index":411,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:29",{"_index":414,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:38",{"_index":418,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:48",{"_index":420,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:64",{"_index":395,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:80",{"_index":416,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:96",{"_index":422,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logging",{"_index":570,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts",{"_index":454,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts:151",{"_index":487,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:161",{"_index":473,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:174",{"_index":478,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:184",{"_index":485,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:191",{"_index":490,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:201",{"_index":492,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:34",{"_index":494,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:41",{"_index":493,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:44",{"_index":469,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:84",{"_index":471,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/memory",{"_index":585,"title":{},"body":{"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["started",{"_index":641,"title":{"index.html":{}},"body":{}}],["statements",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":131,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/MemoryAppender.html":{}}}],["step",{"_index":689,"title":{},"body":{"index.html":{}}}],["storage",{"_index":244,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["store",{"_index":270,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{}}}],["stored",{"_index":272,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["stores",{"_index":245,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["storing",{"_index":251,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["string",{"_index":116,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["strings",{"_index":312,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["super",{"_index":140,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["switch",{"_index":360,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["table",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":779,"title":{},"body":{"index.html":{}}}],["testing",{"_index":89,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["tests",{"_index":412,"title":{},"body":{"classes/Logger.html":{}}}],["therefore",{"_index":338,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.ajaxappender",{"_index":146,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.addheader(\"content",{"_index":154,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.append(loggingevent",{"_index":181,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getbatchsize",{"_index":184,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getlayout",{"_index":186,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.gettimerinterval",{"_index":188,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setbatchsize(batchsize",{"_index":185,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setfailcallback((message",{"_index":160,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(layout",{"_index":187,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(new",{"_index":151,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setsendallonunload(true",{"_index":158,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimed(timerinterval",{"_index":189,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimerinterval(timerinterval",{"_index":190,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappenderfailed",{"_index":517,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.ajaxappenderfailed.emit(message",{"_index":543,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.appenderfailed",{"_index":159,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.appenderfailed.emit(message",{"_index":161,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.browserconsoleappender",{"_index":521,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setlayout(new",{"_index":522,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(convertedthreshold",{"_index":563,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(log4javascript.level.all",{"_index":526,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.configure",{"_index":164,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["this.iscombinedmessages",{"_index":237,"title":{},"body":{"classes/JsonLayout.html":{}}}],["this.localstoragekey",{"_index":300,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.logger",{"_index":423,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["this.logger.debug.apply(this.logger",{"_index":433,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.entry(methodname",{"_index":699,"title":{},"body":{"index.html":{}}}],["this.logger.error(methodname",{"_index":703,"title":{},"body":{"index.html":{}}}],["this.logger.error.apply(this.logger",{"_index":439,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.exit(methodname",{"_index":700,"title":{},"body":{"index.html":{}}}],["this.logger.fatal.apply(this.logger",{"_index":441,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.info.apply(this.logger",{"_index":435,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isdebugenabled",{"_index":432,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iserrorenabled",{"_index":438,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isfatalenabled",{"_index":440,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isinfoenabled",{"_index":434,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.istraceenabled",{"_index":428,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iswarnenabled",{"_index":436,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.setlevel(loglevelconverter.leveltolog4javascript(level",{"_index":427,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.trace.apply(this.logger",{"_index":431,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.warn.apply(this.logger",{"_index":437,"title":{},"body":{"classes/Logger.html":{}}}],["this.logmessages",{"_index":303,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.length",{"_index":320,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.push(message",{"_index":331,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.shift",{"_index":322,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.splice(0",{"_index":611,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.logmessageschanged",{"_index":516,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.logmessageschanged.emit",{"_index":533,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.maxmessages",{"_index":321,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.memoryappender",{"_index":530,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.configure(configuration.memoryappender",{"_index":559,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.getlogmessages",{"_index":566,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.removelogmessages",{"_index":568,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setlayout(new",{"_index":531,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setonlogmessageschangedcallback((message",{"_index":532,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.onlogmessageschangedcallback",{"_index":609,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.onlogmessageschangedcallback(message",{"_index":610,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.setbatchsize(configuration.batchsize",{"_index":173,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.setmaxmessages(configuration.maxmessages",{"_index":316,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.setthreshold(convertedthreshold",{"_index":180,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.settimerinterval(configuration.timerinterval",{"_index":175,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.url",{"_index":149,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.withcredentials",{"_index":150,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["threshold",{"_index":25,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["thresholddefault",{"_index":136,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["throw",{"_index":141,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["time",{"_index":98,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timer",{"_index":112,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timerinterval",{"_index":23,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["timerintervaldefault",{"_index":134,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timestamp",{"_index":232,"title":{},"body":{"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timestamps",{"_index":311,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["tostring",{"_index":40,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["trace",{"_index":201,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["trace(methodname",{"_index":419,"title":{},"body":{"classes/Logger.html":{}}}],["triggered",{"_index":56,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["true",{"_index":790,"title":{},"body":{"index.html":{}}}],["try",{"_index":446,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["tslib",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":51,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["typeof",{"_index":174,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["typical",{"_index":16,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["typically",{"_index":690,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":326,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["under",{"_index":279,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["unit",{"_index":88,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/JsonLayout.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["url",{"_index":19,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/JsonLayout.html":{}}}],["usage",{"_index":684,"title":{},"body":{"index.html":{}}}],["use",{"_index":649,"title":{},"body":{"index.html":{}}}],["used",{"_index":86,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["usefactory",{"_index":793,"title":{},"body":{"index.html":{}}}],["useful",{"_index":600,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["using",{"_index":589,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["valid",{"_index":197,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["value",{"_index":287,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["values",{"_index":198,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["version",{"_index":644,"title":{},"body":{"index.html":{},"properties.html":{}}}],["versions",{"_index":648,"title":{},"body":{"index.html":{}}}],["via",{"_index":14,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["viewer",{"_index":683,"title":{},"body":{"index.html":{}}}],["visible",{"_index":768,"title":{},"body":{"index.html":{}}}],["void",{"_index":68,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["wagner",{"_index":815,"title":{},"body":{"properties.html":{}}}],["want",{"_index":601,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["warn",{"_index":137,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["warn(methodname",{"_index":421,"title":{},"body":{"classes/Logger.html":{}}}],["way",{"_index":781,"title":{},"body":{"index.html":{}}}],["whether",{"_index":207,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["window.location.href",{"_index":236,"title":{},"body":{"classes/JsonLayout.html":{}}}],["withcredentials",{"_index":76,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["write",{"_index":332,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["writes",{"_index":801,"title":{},"body":{"index.html":{}}}],["writing",{"_index":383,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["written",{"_index":380,"title":{},"body":{"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["yes",{"_index":392,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AjaxAppender.html":{"url":"classes/AjaxAppender.html","title":"class - AjaxAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AjaxAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.model.ts\n        \n\n\n            \n                Description\n            \n            \n                An appender which sends the log messages to a server via HTTP.\nA typical configuration could be:\n{\n  \"url\": \"https://my.backend.xy/LoggingBackend\",\n  \"batchSize\": 10,\n  \"timerInterval\": 60000,\n  \"threshold\": \"INFO\"\n}\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                appenderFailed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getBatchSize\n                            \n                            \n                                    Public\n                                getInternalAppender\n                            \n                            \n                                    Public\n                                getLayout\n                            \n                            \n                                    Public\n                                getTimerInterval\n                            \n                            \n                                    Public\n                                setBatchSize\n                            \n                            \n                                    Public\n                                setLayout\n                            \n                            \n                                    Public\n                                setTimerInterval\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: AjaxAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ajax-appender.model.ts:38\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        AjaxAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        appenderFailed\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/ajax-appender.model.ts:34\n                        \n                    \n\n            \n                \n                    Event triggered when the appender could not send log messages to the server.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    message\n                                                    \n                                                            error message\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        append\n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:113\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: AjaxAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:86\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nNeither url nor withCredentials can be modified.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                AjaxAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getBatchSize\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBatchSize()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:138\n                \n            \n\n\n            \n                \n                    Returns the number of log messages sent in each request.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getInternalAppender\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalAppender()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:131\n                \n            \n\n\n            \n                \n                    Get the internally used appender.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         log4javascript.AjaxAppender\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLayout\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayout()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:154\n                \n            \n\n\n            \n                \n                    Returns the appender's layout.\n\n\n                    \n                        Returns :     log4javascript.Layout\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTimerInterval\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimerInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:168\n                \n            \n\n\n            \n                \n                    Returns the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setBatchSize\n                        \n                    \n                \n            \n            \n                \n                    \n                    setBatchSize(batchSize: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:147\n                \n            \n\n\n            \n                \n                    Sets the number of log messages to send in each request.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    batchSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new batch size\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLayout\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLayout(layout: log4javascript.Layout)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:161\n                \n            \n\n\n            \n                \n                    Sets the appender's layout.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layout\n                                    \n                                            log4javascript.Layout\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTimerInterval\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTimerInterval(timerInterval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:177\n                \n            \n\n\n            \n                \n                    Sets the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    timerInterval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new timer interval\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:123\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventEmitter } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { JsonLayout } from \"./json-layout.model\";\nimport { LogLevelConverter } from \"./log-level.converter\";\n\n/**\n * An appender which sends the log messages to a server via HTTP.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"url\": \"https://my.backend.xy/LoggingBackend\",\n *   \"batchSize\": 10,\n *   \"timerInterval\": 60000,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class AjaxAppender extends log4javascript.Appender {\n\n\tprivate static batchSizeDefault = 1;\n\tprivate static timerIntervalDefault = 0;\n\tprivate static thresholdDefault = \"WARN\";\n\n\t/**\n\t * Event triggered when the appender could not send log messages to the server.\n\t *\n\t * @param message error message\n\t */\n\tpublic appenderFailed: EventEmitter;\n\n\tprivate ajaxAppender: log4javascript.AjaxAppender;\n\tprivate url: string;\n\tprivate withCredentials: boolean;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t *\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: AjaxAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\tif (!configuration.url) {\n\t\t\tthrow new Error(\"url must be not empty\");\n\t\t}\n\t\tthis.ajaxAppender = new log4javascript.AjaxAppender(configuration.url, configuration.withCredentials);\n\t\tthis.url = configuration.url;\n\t\tthis.withCredentials = configuration.withCredentials;\n\n\t\tthis.ajaxAppender.setLayout(new JsonLayout(false, false));\n\t\tthis.ajaxAppender.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t\tthis.ajaxAppender.setSendAllOnUnload(true);\n\n\t\tthis.appenderFailed = new EventEmitter();\n\t\tthis.ajaxAppender.setFailCallback((message: any) => {\n\t\t\tthis.appenderFailed.emit(message);\n\t\t});\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tbatchSize: configuration.batchSize || AjaxAppender.batchSizeDefault,\n\t\t\tthreshold: configuration.threshold || AjaxAppender.thresholdDefault,\n\t\t\ttimerInterval: configuration.timerInterval || AjaxAppender.timerIntervalDefault,\n\t\t\turl: configuration.url,\n\t\t\twithCredentials: configuration.withCredentials\n\t\t});\n\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * Neither url nor withCredentials can be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: AjaxAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.url && configuration.url !== this.url) {\n\t\t\t\tthrow new Error(\"url must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.withCredentials && configuration.withCredentials !== this.withCredentials) {\n\t\t\t\tthrow new Error(\"withCredentials must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.batchSize) {\n\t\t\t\tthis.setBatchSize(configuration.batchSize);\n\t\t\t}\n\t\t\tif (typeof configuration.timerInterval === \"number\") {\n\t\t\t\tthis.setTimerInterval(configuration.timerInterval);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t *\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\tthis.ajaxAppender.append(loggingEvent);\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t *\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.AjaxAppender\";\n\t}\n\n\t/**\n\t * Get the internally used appender.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic getInternalAppender(): log4javascript.AjaxAppender {\n\t\treturn this.ajaxAppender;\n\t}\n\n\t/**\n\t * Returns the number of log messages sent in each request.\n\t */\n\tpublic getBatchSize(): number {\n\t\treturn this.ajaxAppender.getBatchSize();\n\t}\n\n\t/**\n\t * Sets the number of log messages to send in each request.\n\t *\n\t * @param batchSize new batch size\n\t */\n\tpublic setBatchSize(batchSize: number): void {\n\t\tthis.ajaxAppender.setBatchSize(batchSize);\n\t}\n\n\t/**\n\t * Returns the appender's layout.\n\t */\n\tpublic getLayout(): log4javascript.Layout {\n\t\treturn this.ajaxAppender.getLayout();\n\t}\n\n\t/**\n\t * Sets the appender's layout.\n\t */\n\tpublic setLayout(layout: log4javascript.Layout): void {\n\t\tthis.ajaxAppender.setLayout(layout);\n\t}\n\n\t/**\n\t * Returns the length of time in milliseconds between each sending of queued log messages.\n\t */\n\tpublic getTimerInterval(): number {\n\t\treturn this.ajaxAppender.getTimerInterval();\n\t}\n\n\t/**\n\t * Sets the length of time in milliseconds between each sending of queued log messages.\n\t *\n\t * @param timerInterval new timer interval\n\t */\n\tpublic setTimerInterval(timerInterval: number): void {\n\t\tthis.ajaxAppender.setTimed(timerInterval > 0);\n\t\tthis.ajaxAppender.setTimerInterval(timerInterval);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AjaxAppenderConfiguration.html":{"url":"interfaces/AjaxAppenderConfiguration.html","title":"interface - AjaxAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AjaxAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.configuration.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for AjaxAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            batchSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            threshold\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timerInterval\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withCredentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        batchSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        batchSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Number of log messages sent in each request.\nDefault: 1.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerInterval\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timerInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Interval for sending log messages (in milliseconds).\nIf set to 0, every message will be sent immediatedly.\nDefault: 0.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Url to send JavaScript logs\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Specifies whether cookies should be sent with each request.\nDefault: false.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AjaxAppenderConfiguration {\n\n\t/**\n\t * Url to send JavaScript logs\n\t */\n\turl: string;\n\n\t/**\n\t * Specifies whether cookies should be sent with each request.\n\t *\n\t * Default: false.\n\t */\n\twithCredentials?: boolean;\n\n\t/**\n\t * Number of log messages sent in each request.\n\t *\n\t * Default: 1.\n\t */\n\tbatchSize?: number;\n\n\t/**\n\t * Interval for sending log messages (in milliseconds).\n\t *\n\t * If set to 0, every message will be sent immediatedly.\n\t *\n\t * Default: 0.\n\t */\n\ttimerInterval?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BrowserConsoleAppenderConfiguration.html":{"url":"interfaces/BrowserConsoleAppenderConfiguration.html","title":"interface - BrowserConsoleAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BrowserConsoleAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/browser-console-appender.configuration.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for BrowserConsoleAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            threshold\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: DEBUG.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface BrowserConsoleAppenderConfiguration {\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: DEBUG.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JsonLayout.html":{"url":"classes/JsonLayout.html","title":"class - JsonLayout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JsonLayout\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/json-layout.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Formats a logging event into JavaScript Object Notation (JSON).\nThe implemenatation is mainly the same as with log4javascript.JsonLayout,\nwith an improvement of serializing messages containing '\"'.\"\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        format\n                        \n                    \n                \n            \n            \n                \n                    \n                    format(loggingEvent: LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/json-layout.model.ts:14\n                \n            \n\n\n            \n                \n                    Formats the log message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/json-layout.model.ts:31\n                \n            \n\n\n            \n                \n                    Gets the layout's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        layout's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\nimport { LoggingEvent } from \"log4javascript\";\n\n/**\n * Formats a logging event into JavaScript Object Notation (JSON).\n * The implemenatation is mainly the same as with log4javascript.JsonLayout,\n * with an improvement of serializing messages containing '\\\"'.\"\n */\nexport class JsonLayout extends log4javascript.JsonLayout {\n\n\t/**\n\t * Formats the log message.\n\t */\n\tpublic format(loggingEvent: LoggingEvent): string {\n\t\tconst eventObj = {\n\t\t\tlogger: loggingEvent.logger.name,\n\t\t\ttimestamp: loggingEvent.timeStampInMilliseconds,\n\t\t\tlevel: loggingEvent.level.toString(),\n\t\t\turl: window.location.href,\n\t\t\tmessage: this.isCombinedMessages() ? loggingEvent.getCombinedMessages() : loggingEvent.messages\n\t\t};\n\t\treturn JSON.stringify(eventObj);\n\t}\n\n\t/**\n\t * Gets the layout's name.\n\t * Mainly for unit testing purposes.\n\t *\n\t * @return layout's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.JsonLayout\";\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalStorageAppender.html":{"url":"classes/LocalStorageAppender.html","title":"class - LocalStorageAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalStorageAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.model.ts\n        \n\n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's local storage.\nThe messages are saved JSON-serialized.\nYou have to configure which key is used for storing the messages.\nA typical configuration could be:\n{\n  \"localStorageKey\": \"myLogs\",\n  \"maxMessages\": 500,\n  \"threshold\": \"INFO\"\n}\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                clearLog\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLocalStorageKey\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Static\n                                loadLogMessages\n                            \n                            \n                                    Static\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: LocalStorageAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/local-storage-appender.model.ts:32\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        LocalStorageAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        append\n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:121\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clearLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearLog()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:201\n                \n            \n\n\n            \n                \n                    Removes all messages from local storage.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: LocalStorageAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:100\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe localStorageKey cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LocalStorageAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLocalStorageKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalStorageKey()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:153\n                \n            \n\n\n            \n                \n                    Get the key which is used to store the messages in the local storage.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLogMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:193\n                \n            \n\n\n            \n                \n                    Gets all messages stored in local storage.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMaxMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:160\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in local storage.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        loadLogMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadLogMessages(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:67\n                \n            \n\n\n            \n                \n                    Load log messages from local storage which are stored there under the given key.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        local storage key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        removeLogMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:88\n                \n            \n\n\n            \n                \n                    Remove log messages from local storage which are stored there under the given key.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        local storage key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMaxMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:171\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in local storage.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:146\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\n\n/**\n * An appender which stores the log messages in the browser's local storage.\n *\n * The messages are saved JSON-serialized.\n * You have to configure which key is used for storing the messages.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"localStorageKey\": \"myLogs\",\n *   \"maxMessages\": 500,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class LocalStorageAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"WARN\";\n\n\tprivate maxMessages: number;\n\n\tprivate localStorageKey: string;\n\tprivate logMessages: LogMessage[];\n\n\t/**\n\t * Creates a new instance of the appender.\n\t *\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: LocalStorageAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\tif (!configuration.localStorageKey || configuration.localStorageKey === \"\") {\n\t\t\tthrow new Error(\"localStorageKey must be not empty\");\n\t\t}\n\t\tthis.localStorageKey = configuration.localStorageKey;\n\n\t\t// read existing logMessages\n\t\tthis.logMessages = LocalStorageAppender.loadLogMessages(this.localStorageKey);\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tlocalStorageKey: configuration.localStorageKey,\n\t\t\tmaxMessages: configuration.maxMessages || LocalStorageAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || LocalStorageAppender.thresholdDefault,\n\t\t});\n\t}\n\n\t/**\n\t * Load log messages from local storage which are stored there under the given key.\n\t *\n\t * @param localStorageKey local storage key\n\t * @return stored messages\n\t */\n\tpublic static loadLogMessages(localStorageKey: string): LogMessage[] {\n\t\tlet logMessages: LogMessage[];\n\n\t\tif (!localStorageKey || localStorage.getItem(localStorageKey) === null) {\n\t\t\tlogMessages = [];\n\t\t} else {\n\t\t\tlogMessages = JSON.parse(localStorage.getItem(localStorageKey));\n\t\t\tfor (const logMessage of logMessages) {\n\t\t\t\t// timestamps are serialized as strings\n\t\t\t\tlogMessage.timeStamp = new Date(logMessage.timeStamp);\n\t\t\t}\n\t\t}\n\n\t\treturn logMessages;\n\t}\n\n\t/**\n\t * Remove log messages from local storage which are stored there under the given key.\n\t *\n\t * @param localStorageKey local storage key\n\t */\n\tpublic static removeLogMessages(localStorageKey: string): void {\n\t\tlocalStorage.removeItem(localStorageKey);\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The localStorageKey cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: LocalStorageAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.localStorageKey && configuration.localStorageKey !== this.localStorageKey) {\n\t\t\t\tthrow new Error(\"localStorageKey must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t *\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger !== \"undefined\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// write values to localStorage\n\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t *\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.LocalStorageAppender\";\n\t}\n\n\t/**\n\t * Get the key which is used to store the messages in the local storage.\n\t */\n\tpublic getLocalStorageKey(): string {\n\t\treturn this.localStorageKey;\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in local storage.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in local storage.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t *\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tif (this.maxMessages !== value) {\n\t\t\tthis.maxMessages = value;\n\n\t\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\t\t// there are too much logMessages for the new value, therefore remove oldest messages\n\t\t\t\twhile (this.logMessages.length > this.maxMessages) {\n\t\t\t\t\tthis.logMessages.shift();\n\t\t\t\t}\n\n\t\t\t\t// write values to localStorage\n\t\t\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in local storage.\n\t * Mainly for unit testing purposes.\n\t *\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Removes all messages from local storage.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic clearLog(): void {\n\t\tthis.logMessages = [];\n\t\tlocalStorage.removeItem(this.localStorageKey);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalStorageAppenderConfiguration.html":{"url":"interfaces/LocalStorageAppenderConfiguration.html","title":"interface - LocalStorageAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LocalStorageAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.configuration.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for LocalStorageAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            localStorageKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxMessages\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            threshold\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        localStorageKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key which is used to store the messages in the local storage.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LocalStorageAppenderConfiguration {\n\t/**\n\t * Key which is used to store the messages in the local storage.\n\t */\n\tlocalStorageKey: string;\n\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogLevelConverter.html":{"url":"classes/LogLevelConverter.html","title":"class - LogLevelConverter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogLevelConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-level.converter.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper class for converting log levels from and to different data type.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                levelFromLog4Javascript\n                            \n                            \n                                    Static\n                                levelFromString\n                            \n                            \n                                    Static\n                                levelToLog4Javascript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        levelFromLog4Javascript\n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromLog4Javascript(level: log4javascript.Level)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:16\n                \n            \n\n\n            \n                \n                    Converts log4javascript.Level to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            log4javascript.Level\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        log4javascript's data type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        levelFromString\n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromString(level: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:45\n                \n            \n\n\n            \n                \n                    Converts string representation to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string representation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        levelToLog4Javascript\n                        \n                    \n                \n            \n            \n                \n                    \n                    levelToLog4Javascript(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:74\n                \n            \n\n\n            \n                \n                    Converts internal LogLevel to log4javascript.Level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     log4javascript.Level\n\n                    \n                    \n                        level log4javascript's data type\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Helper class for converting log levels from and to different data type.\n */\nexport class LogLevelConverter {\n\n\t/**\n\t * Converts log4javascript.Level to internal LogLevel.\n\t *\n\t * @param level log4javascript's data type\n\t * @return internal data type.\n\t */\n\tpublic static levelFromLog4Javascript(level: log4javascript.Level): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase log4javascript.Level.ALL:\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase log4javascript.Level.DEBUG:\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase log4javascript.Level.ERROR:\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase log4javascript.Level.FATAL:\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase log4javascript.Level.INFO:\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase log4javascript.Level.OFF:\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase log4javascript.Level.TRACE:\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase log4javascript.Level.WARN:\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts string representation to internal LogLevel.\n\t *\n\t * @param level string representation\n\t * @return internal data type.\n\t */\n\tpublic static levelFromString(level: string): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase \"ALL\":\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase \"DEBUG\":\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase \"ERROR\":\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase \"FATAL\":\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase \"INFO\":\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase \"OFF\":\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase \"TRACE\":\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase \"WARN\":\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts internal LogLevel to log4javascript.Level.\n\t *\n\t * @param internal data type.\n\t * @return level log4javascript's data type\n\t */\n\tpublic static levelToLog4Javascript(level: LogLevel): log4javascript.Level {\n\t\tswitch (level) {\n\t\t\tcase LogLevel.ALL:\n\t\t\t\treturn log4javascript.Level.ALL;\n\t\t\tcase LogLevel.DEBUG:\n\t\t\t\treturn log4javascript.Level.DEBUG;\n\t\t\tcase LogLevel.ERROR:\n\t\t\t\treturn log4javascript.Level.ERROR;\n\t\t\tcase LogLevel.FATAL:\n\t\t\t\treturn log4javascript.Level.FATAL;\n\t\t\tcase LogLevel.INFO:\n\t\t\t\treturn log4javascript.Level.INFO;\n\t\t\tcase LogLevel.OFF:\n\t\t\t\treturn log4javascript.Level.OFF;\n\t\t\tcase LogLevel.TRACE:\n\t\t\t\treturn log4javascript.Level.TRACE;\n\t\t\tcase LogLevel.WARN:\n\t\t\t\treturn log4javascript.Level.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogMessage.html":{"url":"interfaces/LogMessage.html","title":"interface - LogMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LogMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-message.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Log message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logger\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            methodName\n                                        \n                                \n                                \n                                        \n                                            timeStamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Log level.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logger:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the logger.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        methodName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        methodName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Method, in which the message was written.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeStamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Time when the log was written.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LogMessage {\n\t/**\n\t * Time when the log was written.\n\t */\n\ttimeStamp: Date;\n\n\t/**\n\t * Log level.\n\t */\n\tlevel: string;\n\n\t/**\n\t * Name of the logger.\n\t */\n\tlogger: string;\n\n\t/**\n\t * Method, in which the message was written.\n\t */\n\tmethodName: string;\n\n\t/**\n\t * Message.\n\t */\n\tmessage: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logger.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Logger for writing log messages.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                debug\n                            \n                            \n                                    Public\n                                entry\n                            \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                exit\n                            \n                            \n                                    Public\n                                fatal\n                            \n                            \n                                    Public\n                                formatArgument\n                            \n                            \n                                    Public\n                                getInternalLogger\n                            \n                            \n                                    Public\n                                getLogLevel\n                            \n                            \n                                    Public\n                                info\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                trace\n                            \n                            \n                                    Public\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger?: string | any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/logger.model.ts:11\n                            \n                        \n\n                \n                    \n                            Creates a new instance of a logger.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:64\n                \n            \n\n\n            \n                \n                    Logs a message at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entry\n                        \n                    \n                \n            \n            \n                \n                    \n                    entry(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:145\n                \n            \n\n\n            \n                \n                    Logs the entry into a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:112\n                \n            \n\n\n            \n                \n                    Logs a message at level ERROR.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        exit\n                        \n                    \n                \n            \n            \n                \n                    \n                    exit(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:164\n                \n            \n\n\n            \n                \n                    Logs the exit of a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fatal\n                        \n                    \n                \n            \n            \n                \n                    \n                    fatal(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:128\n                \n            \n\n\n            \n                \n                    Logs a message at level FATAL.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        formatArgument\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatArgument(arg: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:179\n                \n            \n\n\n            \n                \n                    Formats the given argument.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arg\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getInternalLogger\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:199\n                \n            \n\n\n            \n                \n                    Returns the internal Logger (for unit tests only).\n\n\n                    \n                        Returns :         log4javascript.Logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogLevel()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:29\n                \n            \n\n\n            \n                \n                    Get the log level.\n\n\n                    \n                        Returns :         LogLevel\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        info\n                        \n                    \n                \n            \n            \n                \n                    \n                    info(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:80\n                \n            \n\n\n            \n                \n                    Logs a message at level INFO.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLogLevel\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:38\n                \n            \n\n\n            \n                \n                    Set the log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new log level\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        trace\n                        \n                    \n                \n            \n            \n                \n                    \n                    trace(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:48\n                \n            \n\n\n            \n                \n                    Logs a message at level TRACE.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:96\n                \n            \n\n\n            \n                \n                    Logs a message at level WARN.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Logger for writing log messages.\n */\nexport class Logger {\n\n\tprivate logger: log4javascript.Logger;\n\n\t/**\n\t * Creates a new instance of a logger.\n\t */\n\tconstructor(logger?: string | any) {\n\t\tif (typeof logger === \"undefined\") {\n\t\t\tthis.logger = log4javascript.getRootLogger();\n\t\t} else if (typeof logger === \"string\") {\n\t\t\tthis.logger = log4javascript.getLogger(logger);\n\t\t} else {\n\t\t\tthis.logger = logger;\n\t\t}\n\t}\n\n\t/**\n\t * Get the log level.\n\t */\n\tpublic getLogLevel(): LogLevel {\n\t\treturn LogLevelConverter.levelFromLog4Javascript(this.logger.getLevel());\n\t}\n\n\t/**\n\t * Set the log level.\n\t *\n\t * @param level the new log level\n\t */\n\tpublic setLogLevel(level: LogLevel): void {\n\t\tthis.logger.setLevel(LogLevelConverter.levelToLog4Javascript(level));\n\t}\n\n\t/**\n\t * Logs a message at level TRACE.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic trace(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.trace.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic debug(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.debug.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level INFO.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic info(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level WARN.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic warn(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isWarnEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.warn.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level ERROR.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic error(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isErrorEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.error.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level FATAL.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic fatal(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isFatalEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.fatal.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the entry into a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic entry(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"entry\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the exit of a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic exit(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"exit\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Formats the given argument.\n\t */\n\tpublic formatArgument(arg: any): string {\n\t\tif (typeof arg === \"string\") {\n\t\t\treturn arg;\n\t\t} else if (typeof arg === \"number\") {\n\t\t\treturn arg.toString();\n\t\t} else if (arg instanceof Error) {\n\t\t\t// JSON.stringify() returns here \"{ }\"\n\t\t\treturn arg.toString();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(arg);\n\t\t\t} catch (e) {\n\t\t\t\treturn e.message;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the internal Logger (for unit tests only).\n\t */\n\tpublic getInternalLogger(): log4javascript.Logger {\n\t\treturn this.logger;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging functionality.\nBy default, the following settings are used:\n\nlogger: root with level WARN\nappender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n\nVia configure, it is possible to amend these settings.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ajaxAppenderFailed\n                            \n                            \n                                    Public\n                                logMessagesChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogger\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getLogMessagesFromLocalStorage\n                            \n                            \n                                    Public\n                                getRootLogger\n                            \n                            \n                                    Public\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                removeLogMessagesFromLocalStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/logging.service.ts:44\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the service.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration?: LoggingServiceConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:84\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LoggingServiceConfiguration\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLogger\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogger(loggerName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:161\n                \n            \n\n\n            \n                \n                    Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggerName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the logger\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLogMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:174\n                \n            \n\n\n            \n                \n                    Gets the last log messages.\nThe log messages are retrieved from the internal MemoryAppender.\nThat means you will get only the most current messages. The number of the messages is limited\nby its maxMessages value.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLogMessagesFromLocalStorage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessagesFromLocalStorage(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:184\n                \n            \n\n\n            \n                \n                    Loads the log messages written by the LocalStorageAppender with the given key.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key for the local storage\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getRootLogger\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRootLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:151\n                \n            \n\n\n            \n                \n                    Gets the root logger from which all other loggers derive.\n\n\n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        root logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeLogMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:191\n                \n            \n\n\n            \n                \n                    Remove all log messages.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeLogMessagesFromLocalStorage\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessagesFromLocalStorage(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:201\n                \n            \n\n\n            \n                \n                    Removes the log messages written by the LocalStorageAppender with the given key.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key for the local storage\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ajaxAppenderFailed\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/logging.service.ts:41\n                        \n                    \n\n            \n                \n                    Event triggered when ajax appender could not send log messages to the server.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    message\n                                                    \n                                                            error message\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logMessagesChanged\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/logging.service.ts:34\n                        \n                    \n\n            \n                \n                    Event triggered when the log messages got (potentially) change.\nThis can happen when:\n\nnew message was added\nall message where removed from memory\nall massages where removed for one spcific LocalStorageAppender\n\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable, Optional } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppender } from \"./ajax-appender.model\";\nimport { LocalStorageAppender } from \"./local-storage-appender.model\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogMessage } from \"./log-message.model\";\nimport { Logger } from \"./logger.model\";\nimport { LoggingServiceConfiguration } from \"./logging-service.configuration\";\nimport { MemoryAppender } from \"./memory-appender.model\";\n\n/**\n * Service for logging functionality.\n *\n * By default, the following settings are used:\n *  - logger: root with level WARN\n *  - appender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n *\n * Via [configure](#configure), it is possible to amend these settings.\n */\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class LoggingService {\n\n\t/**\n\t * Event triggered when the log messages got (potentially) change.\n\t * This can happen when:\n\t * - new message was added\n\t * - all message where removed from memory\n\t * - all massages where removed for one spcific LocalStorageAppender\n\t */\n\tpublic logMessagesChanged: EventEmitter;\n\n\t/**\n\t * Event triggered when ajax appender could not send log messages to the server.\n\t *\n\t * @param message error message\n\t */\n\tpublic ajaxAppenderFailed: EventEmitter;\n\n\tprivate memoryAppender: MemoryAppender;\n\tprivate browserConsoleAppender: log4javascript.BrowserConsoleAppender;\n\n\t/**\n\t * Creates a new instance of the service.\n\t */\n\tconstructor() {\n\n\t\t// prevent log4javascript to show alerts on case of errors\n\t\tlog4javascript.logLog.setQuietMode(true);\n\n\t\t// create event emitter\n\t\tthis.logMessagesChanged = new EventEmitter();\n\t\tthis.ajaxAppenderFailed = new EventEmitter();\n\n\t\t// configure appender\n\t\tconst logger = log4javascript.getRootLogger();\n\t\tlogger.setLevel(log4javascript.Level.WARN);\n\n\t\t// browser console appender for debugger\n\t\tthis.browserConsoleAppender = new log4javascript.BrowserConsoleAppender();\n\t\tthis.browserConsoleAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.browserConsoleAppender.setThreshold(log4javascript.Level.ALL);\n\t\tlogger.addAppender(this.browserConsoleAppender);\n\n\t\t// in-memory appender for display on log messages page\n\t\tthis.memoryAppender = new MemoryAppender();\n\t\tthis.memoryAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.memoryAppender.setOnLogMessagesChangedCallback((message) => {\n\t\t\tthis.logMessagesChanged.emit();\n\t\t});\n\t\tlogger.addAppender(this.memoryAppender);\n\n\t\tthis.configure();\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration?: LoggingServiceConfiguration): void {\n\n\t\tif (typeof configuration === \"undefined\") {\n\t\t\tconfiguration = {};\n\t\t}\n\n\t\t// set log levels\n\t\tif (typeof configuration.logLevels !== \"undefined\") {\n\t\t\tfor (const level of configuration.logLevels) {\n\t\t\t\tlet logger: log4javascript.Logger;\n\t\t\t\tif (level.loggerName === \"root\") {\n\t\t\t\t\tlogger = log4javascript.getRootLogger();\n\t\t\t\t} else {\n\t\t\t\t\tlogger = log4javascript.getLogger(level.loggerName);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tlogger.setLevel(LogLevelConverter.levelToLog4Javascript(LogLevelConverter.levelFromString(level.logLevel)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(`invalid log level ${level.logLevel}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// configure AjaxAppender\n\t\tif (typeof configuration.ajaxAppender !== \"undefined\") {\n\t\t\tconst ajaxAppender = new AjaxAppender(configuration.ajaxAppender);\n\t\t\tajaxAppender.appenderFailed.subscribe((message: string) => {\n\t\t\t\tthis.ajaxAppenderFailed.emit(message);\n\t\t\t});\n\t\t\tlog4javascript.getRootLogger().addAppender(ajaxAppender);\n\t\t}\n\n\t\t// configure LocalStorageAppender\n\t\tif (typeof configuration.localStorageAppender !== \"undefined\") {\n\t\t\tconst localStorageAppender = new LocalStorageAppender(configuration.localStorageAppender);\n\t\t\tlog4javascript.getRootLogger().addAppender(localStorageAppender);\n\n\t\t\t// ensure that an eventual memoryAppender is behind the localStorageAppender\n\t\t\tconst appenders = new Logger().getInternalLogger().getEffectiveAppenders();\n\t\t\tconst memoryAppender = appenders.find((a) => a.toString() === \"Ionic.Logging.MemoryAppender\") as MemoryAppender;\n\t\t\tif (memoryAppender) {\n\t\t\t\tlog4javascript.getRootLogger().removeAppender(memoryAppender);\n\t\t\t\tlog4javascript.getRootLogger().addAppender(memoryAppender);\n\t\t\t}\n\t\t}\n\n\t\t// configure MemoryAppender\n\t\tif (configuration.memoryAppender) {\n\t\t\tthis.memoryAppender.configure(configuration.memoryAppender);\n\t\t}\n\n\t\t// configure BrowserConsoleAppender\n\t\tif (configuration.browserConsoleAppender) {\n\t\t\tif (configuration.browserConsoleAppender.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.browserConsoleAppender.threshold));\n\t\t\t\tthis.browserConsoleAppender.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Gets the root logger from which all other loggers derive.\n\t *\n\t * @return root logger\n\t */\n\tpublic getRootLogger(): Logger {\n\t\treturn new Logger();\n\t}\n\n\t/**\n\t * Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\t *\n\t * @param loggerName name of the logger\n\t * @return logger\n\t */\n\tpublic getLogger(loggerName: string): Logger {\n\t\treturn new Logger(loggerName);\n\t}\n\n\t/**\n\t * Gets the last log messages.\n\t *\n\t * The log messages are retrieved from the internal [MemoryAppender](../memoryappender.html).\n\t * That means you will get only the most current messages. The number of the messages is limited\n\t * by its maxMessages value.\n\t *\n\t * @return log messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.memoryAppender.getLogMessages();\n\t}\n\n\t/**\n\t * Loads the log messages written by the LocalStorageAppender with the given key.\n\t *\n\t * @param localStorageKey key for the local storage\n\t * @returns log messages\n\t */\n\tpublic getLogMessagesFromLocalStorage(localStorageKey: string): LogMessage[] {\n\t\treturn LocalStorageAppender.loadLogMessages(localStorageKey);\n\t}\n\n\t/**\n\t * Remove all log messages.\n\t */\n\tpublic removeLogMessages(): void {\n\t\tthis.memoryAppender.removeLogMessages();\n\t\tthis.logMessagesChanged.emit();\n\t}\n\n\t/**\n\t * Removes the log messages written by the LocalStorageAppender with the given key.\n\t *\n\t * @param localStorageKey key for the local storage\n\t */\n\tpublic removeLogMessagesFromLocalStorage(localStorageKey: string): void {\n\t\tLocalStorageAppender.removeLogMessages(localStorageKey);\n\t\tthis.logMessagesChanged.emit();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggingServiceConfiguration.html":{"url":"interfaces/LoggingServiceConfiguration.html","title":"interface - LoggingServiceConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggingServiceConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging-service.configuration.ts\n        \n\n\n            \n                Description\n            \n            \n                Partial configuration definition for LoggingService.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            ajaxAppender\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            browserConsoleAppender\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            localStorageAppender\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            logLevels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            memoryAppender\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ajaxAppender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ajaxAppender:         AjaxAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AjaxAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for AjaxAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        browserConsoleAppender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        browserConsoleAppender:         BrowserConsoleAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BrowserConsoleAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for BrowserConsoleAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageAppender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        localStorageAppender:         LocalStorageAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LocalStorageAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for LocalStorageAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logLevels:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Log levels for different loggers.\nDefault: root: WARN\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        memoryAppender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        memoryAppender:         MemoryAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MemoryAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for MemoryAppender.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { BrowserConsoleAppenderConfiguration } from \"./browser-console-appender.configuration\";\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * Partial configuration definition for LoggingService.\n */\nexport interface LoggingServiceConfiguration {\n\n\t/**\n\t * Log levels for different loggers.\n\t * Default: root: WARN\n\t */\n\tlogLevels?: Array;\n\n\t/**\n\t * Settings for AjaxAppender.\n\t */\n\tajaxAppender?: AjaxAppenderConfiguration;\n\n\t/**\n\t * Settings for LocalStorageAppender.\n\t */\n\tlocalStorageAppender?: LocalStorageAppenderConfiguration;\n\n\t/**\n\t * Settings for MemoryAppender.\n\t */\n\tmemoryAppender?: MemoryAppenderConfiguration;\n\n\t/**\n\t * Settings for BrowserConsoleAppender.\n\t */\n\tbrowserConsoleAppender?: BrowserConsoleAppenderConfiguration;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggingServiceModule.html":{"url":"modules/LoggingServiceModule.html","title":"module - LoggingServiceModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggingServiceModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/logging-service.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\n\n@NgModule({\n\timports: [\n\t],\n\tdeclarations: [\n\t],\n\texports: [\n\t]\n})\nexport class LoggingServiceModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemoryAppender.html":{"url":"classes/MemoryAppender.html","title":"class - MemoryAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemoryAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.model.ts\n        \n\n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's memory.\nThe MemoryAppender is enabled by default.\nIf you do not specify anything else, it is using this configuration:\n{\n  \"memoryAppender\": [\n    {\n      \"maxMessages\": 250,\n      \"threshold\": \"ALL\"\n    }\n}\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Public\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                setOnLogMessagesChangedCallback\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration?: MemoryAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/memory-appender.model.ts:32\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        MemoryAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        append\n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:78\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: MemoryAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:60\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                MemoryAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLogMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:137\n                \n            \n\n\n            \n                \n                    Gets all messages stored in memory.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMaxMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:112\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in memory.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeLogMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:144\n                \n            \n\n\n            \n                \n                    Remove all messages stored in memory.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMaxMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:123\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in memory.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setOnLogMessagesChangedCallback\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:154\n                \n            \n\n\n            \n                \n                    Registers a callback which will be called every time a new message is appended.\nThis could be useful if you want to show new messages in realtime.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        callback to be called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:105\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * An appender which stores the log messages in the browser's memory.\n *\n * The MemoryAppender is enabled by default.\n * If you do not specify anything else, it is using this configuration:\n *\n * ```JSON\n * {\n *   \"memoryAppender\": [\n *     {\n *       \"maxMessages\": 250,\n *       \"threshold\": \"ALL\"\n *     }\n * }\n * ```\n */\nexport class MemoryAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"ALL\";\n\n\tprivate maxMessages: number;\n\n\tprivate logMessages: LogMessage[];\n\tprivate onLogMessagesChangedCallback: (message: LogMessage) => void;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t *\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration?: MemoryAppenderConfiguration) {\n\t\tsuper();\n\n\t\tthis.logMessages = [];\n\n\t\t// process configuration\n\t\tconfiguration = configuration || {};\n\t\tthis.configure({\n\t\t\tmaxMessages: configuration.maxMessages || MemoryAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || MemoryAppender.thresholdDefault,\n\t\t});\n\n\t\tthis.maxMessages = MemoryAppender.maxMessagesDefault;\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * Only the defined properties get overwritten.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: MemoryAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t *\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger === \"object\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// inform about new message\n\t\tif (typeof this.onLogMessagesChangedCallback === \"function\") {\n\t\t\tthis.onLogMessagesChangedCallback(message);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t *\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.MemoryAppender\";\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in memory.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in memory.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t *\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tthis.maxMessages = value;\n\n\t\t// if there are too much logMessages for the new value, remove oldest messages\n\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\tthis.logMessages.splice(0, this.logMessages.length - this.maxMessages);\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in memory.\n\t *\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Remove all messages stored in memory.\n\t */\n\tpublic removeLogMessages(): void {\n\t\tthis.logMessages.splice(0);\n\t}\n\n\t/**\n\t * Registers a callback which will be called every time a new message is appended.\n\t * This could be useful if you want to show new messages in realtime.\n\t *\n\t * @param callback callback to be called\n\t */\n\tpublic setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void): void {\n\t\tthis.onLogMessagesChangedCallback = callback;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemoryAppenderConfiguration.html":{"url":"interfaces/MemoryAppenderConfiguration.html","title":"interface - MemoryAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MemoryAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.configuration.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for MemoryAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            maxMessages\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            threshold\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\nDefault: ALL.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface MemoryAppenderConfiguration {\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\n\t *\n\t * Default: ALL.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/ajax-appender.configuration.ts\n            \n            interface\n            AjaxAppenderConfiguration\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/ajax-appender.model.ts\n            \n            class\n            AjaxAppender\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/lib/browser-console-appender.configuration.ts\n            \n            interface\n            BrowserConsoleAppenderConfiguration\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/json-layout.model.ts\n            \n            class\n            JsonLayout\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.configuration.ts\n            \n            interface\n            LocalStorageAppenderConfiguration\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.model.ts\n            \n            class\n            LocalStorageAppender\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/lib/log-level.converter.ts\n            \n            class\n            LogLevelConverter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/log-message.model.ts\n            \n            interface\n            LogMessage\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logger.model.ts\n            \n            class\n            Logger\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/lib/logging-service.configuration.ts\n            \n            interface\n            LoggingServiceConfiguration\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.configuration.ts\n            \n            interface\n            MemoryAppenderConfiguration\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.model.ts\n            \n            class\n            MemoryAppender\n            \n                100 %\n                (10/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            log4javascript : ^1.4.16\n        \n            tslib : ^2.3.1\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^16.0.0\n        \n            @angular/core : ^16.0.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LogLevel   (src/.../log-level.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/log-level.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            Logging levels.\n\n                        \n                    \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                 FATAL\n                            \n                        \n                        \n                            \n                                 OFF\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nionic-logging-service\nThe dependencies used by the latest version are the same as needed for Ionic 6.1.9. For older versions use:\n\n\n\nionic-logging-service\nIonic\nAngular\n\n\n\n\n17.0.0\n>= 6.1.9\n^16.0.0\n\n\n16.0.0\n>= 6.1.9\n^15.0.0\n\n\n15.0.0\n>= 6.1.9\n^14.0.0\n\n\n14.0.0\n>= 6.0.0\n^13.0.0\n\n\n13.0.0\n>= 5.0.0\n^12.0.0\n\n\n12.0.0\n>= 5.0.0\n^11.0.0\n\n\n11.0.0\n>= 5.0.0\n^10.0.0\n\n\n9.0.0\n>= 5.0.0\n^9.0.0\n\n\n8.0.0\n>= 4.7.0\n^8.0.0\n\n\n7.0.0\n>= 4.0.0-rc\n^7.0.0\n\n\n6.0.0\n>= 4.0.0-beta\n^6.0.0\n\n\n5.1.0\n>= 3.9.0\n^5.0.0\n\n\n3.1.0\n>= 3.0.0\n^4.0.0\n\n\n2.0.0\n>= 2.2.0\n^2.4.8\n\n\n1.2.1\n>= 2.0.0\n^2.2.1\n\n\n\nThis service encapsulates log4javascript's functionalities for apps built with Ionic framework.\nFor a sample, just have a look at ionic-logging-viewer.\nUsage\nFirst, you need to import the LoggingServiceModule in your AppModule. The next step is typically the configuration (see below). And then, finally, you can use the LoggingService in your code, e.g.:\nimport { Logger, LoggingService } from \"ionic-logging-service\";\n\nexport class MyComponent {\n\n  private logger: Logger;\n\n  constructor(\n    loggingService: LoggingService) {\n\n    this.logger = loggingService.getLogger(\"MyApp.MyComponent\");\n    const methodName = \"ctor\";\n    this.logger.entry(methodName);\n\n    ...\n\n    this.logger.exit(methodName);\n  }\n\n  public myMethod(index: number, message: string): number[] {\n    const methodName = \"myMethod\";\n    this.logger.entry(methodName, index, number);\n\n    try {\n      ...\n    } catch (e) {\n      this.logger.error(methodName, \"some error\", e);\n    }\n\n    this.logger.exit(methodName);\n    return result;\n  }\n}Depending how the code is called, this could produce the following output in the browser's console:\nI  18:49:43.794  MyApp.MyComponent  ctor  entry\nI  18:49:43.797  MyApp.MyComponent  ctor  exit\nI  18:49:43.801  MyApp.MyComponent  myMethod  entry  42  Hello\nE  18:49:43.814  MyApp.MyComponent  myMethod  some error\nI  18:49:43.801  MyApp.MyComponent  myMethod  exit  [2, 5, 99]Logger\nA logger is the component responsible for logging. Typically, you have one logger per every class. The logger name describe the place where in your app the class is placed. The single parts are separated by dots ('.'). This is quite the same as with namespaces in dotnet or packages in Java.\nThis builds some kind of hierarchy. E.g., if you have a logger named A.B.C.D, you get automatically also loggers for A.B.C, A.B and A. Additionally, there is the so-called root logger, which is the parent of all other loggers.\nThe hierarchy is important, since the loggers inherit the log level from there parent - if there is no other level defined. That means, you can define just one log level for the complete app (by setting the root logger's level), and you can par example define, you do not want to see logs written for logger A.B.C (this includes also A.B.C.D).\nLevel\nEvery log message has a level. This is the severity of the message. Available levels are TRACE, DEBUG, INFO, WARN, ERROR and FATAL - these correspond to the logging methods trace, debug, info, warn, error and fatal of Logger. Levels are ordered as follows: TRACE DEBUG INFO WARN ERROR FATAL. This means the FATAL is the most severe and TRACE the least. Also included are levels called ALL and OFF intended to enable or disable all logging respectively.\nSetting a level to a logger disables log messages of severity lower than that level. For instance, if a level of INFO is set on a logger then only log messages of severity INFO or greater will be logged, meaning DEBUG and TRACE messages will not be logged.\nAppender\nAppenders make the logs visible, e.g. by writing them to the browser's console. This is quite useful during development, either in console or using ionic serve --consolelogs. But later, you will need other logs:\n\nAjaxAppender: sends the log messages to a backend server\nMemoryAppender: keeps the log messages in memory\nLocalStorageAppender: stores the log messages in local storage\n\nIf you want to see a complete example, have a look at ionic-feedback-sample.\nConfiguration\nBy default, the following configuration is used:\n\nLogger:\n\nroot: Level.WARN\n\n\nAppender:\n\nBrowserConsoleAppender\nMemoryAppender\n\n\n\nTo change it, just call configure(). This method takes an object of type LoggingServiceConfiguration.\nThe recommended way is to place the configuration in environment.ts:\nexport const environment = {\n  logging: {\n    ...\n  }\n};Call configure() in your app.module.ts:\nexport function configureLogging(loggingService: LoggingService): () => void {\n  return () => loggingService.configure(environment.logging);\n}\n\n@NgModule({\n  ...\n  imports: [\n    ...\n    LoggingServiceModule\n  ],\n  providers: [\n    {\n      deps: [LoggingService],\n      multi: true,\n      provide: APP_INITIALIZER,\n      useFactory: configureLogging\n    }\n  ]\n})\nexport class AppModule { }logLevels\nlogLevels gets an array of log level definitions for different loggers, e.g.\n{\n  \"logLevels\": [\n    {\n      \"loggerName\": \"root\",\n      \"logLevel\": \"DEBUG\"\n    },\n    {\n      \"loggerName\": \"MyApp.MyNamespace.MyLogger\",\n      \"logLevel\": \"INFO\"\n    }\n  ]\n};That means, instead of the default log level WARN, you want to log all messages with level DEBUG and higher. Only for MyApp.MyNamespace.MyLogger, you want to restrict the level to INFO.\najaxAppender\nWith ajaxAppender, you add an additional appender of type AjaxAppender, which sends the log messages to a backend server.\nbrowserConsoleAppender\nWith browserConsoleAppender, it is possible to configure the BrowserConsoleAppender, which writes the log to the browser's console.\nlocalStorageAppender\nWith localStorageAppender, you add an additional appender of type LocalStorageAppender, which stores log messages in the local storage.\nmemoryAppender\nWith memoryAppender, it is possible to configure the MemoryAppender, which keeps log messages in the memory.\nAPI\nsee API documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        LoggingServiceModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 16.0.0\n        \n            Description : Logging functionalities for apps built with Ionic framework\n        \n            Keywords : ionic, mobile, logging, log4javascript\n        \n            License : MIT\n        \n            Repository : https://github.com/Ritzlgrmft/ionic-logging-service.git\n        \n            Author : Markus Wagner\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
